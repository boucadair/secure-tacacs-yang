  module ietf-system-secure-tacacs {
     yang-version 1.1;
     namespace
          "urn:ietf:params:xml:ns:yang:ietf-system-secure-tacacs";
     prefix secure-tacacs;

     import ietf-keystore {
       prefix ks;
       reference
         "RFC CCCC: A YANG Data Model for a Keystore";
     }
     import ietf-tls-server {
       prefix tls;
       reference
         "RFC FFFF: YANG Groupings for TLS Clients and TLS Servers";
     }
     import ietf-system-tacacs-plus {
       prefix sys-tcs-plus;
       reference
         "RFC 9105: A YANG Data Model for Terminal Access Controller
                    Access-Control System Plus (TACACS+)";
     }

  organization
    "IETF OPSAWG (Operations and Management Area Working Group)";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/opsawg/>
     WG List:  <mailto:opsawg@ietf.org>

     Editor:   Mohamed Boucadair
               <mailto:mohamed.boucadair@orange.com>";

     description
       "This module provides configuration of TACACS+ over TLS.

     Copyright (c) 2024 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Revised BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see the
     RFC itself for full legal notices.";

  revision 2024-05-23 {
    description
      "Initial revision.";
    reference
      "RFC XXXX: XXXX";
  }

// to be further tweaked to align with the scope of tacacs+TLS spec
// can't reuse the groupings in TLS as they are because TLS1.2 is not supported

     grouping tls-client-grouping {
       description
         "A reusable grouping for configuring a TLS client without
          any consideration for how an underlying TCP session is
          established.";

       container client-identity {
         nacm:default-deny-write;
         presence
           "Indicates that a TLS-level client identity has been
            configured.  This statement is present so the mandatory
            descendant do not imply that this node must be configured.";
         description
           "Identity credentials the TLS client may present when
            establishing a connection to a TLS server. When configured,
            and requested by the TLS server when establishing a
            TLS session, these credentials are passed in the
            Certificate message.";
         reference
           "RFC 8446: The Transport Layer Security (TLS)
                      Protocol Version 1.3, Section 4.4.2
            RFC CCCC: A YANG Data Model for a Keystore";
         choice auth-type {
           mandatory true;
           description
             "A choice amongst authentication types, of which one must
              be enabled and selected.";
           case certificate {
             if-feature "tls:client-ident-x509-cert";
             container certificate {
               description
                 "Specifies the client identity using a certificate.";
               uses
                 "ks:inline-or-keystore-end-entity-cert-with-key-"
                 + "grouping" {
                 refine "tls:inline-or-keystore/tls:inline/tls:inline-definition" {
                   must 'not(public-key-format) or derived-from-or-self'
                      + '(public-key-format, "ct:subject-public-key-'
                      + 'info-format")';
                 }
                 refine "tls:inline-or-keystore/tls:central-keystore/"
                      + "tls:central-keystore-reference/tls:asymmetric-key" {
                   must 'not(deref(.)/../ks:public-key-format) or '
                      + 'derived-from-or-self(deref(.)/../ks:public-'
                      + 'key-format, "ct:subject-public-key-info-'
                      + 'format")';
                 }
               }
             }
           }
           case raw-public-key {
             if-feature "tls:client-ident-raw-public-key";
             container raw-private-key {
               description
                 "Specifies the client identity using a raw
                  private key.";
               uses ks:inline-or-keystore-asymmetric-key-grouping {
                 refine "tls:inline-or-keystore/tls:inline/tls:inline-definition" {
                   must 'not(public-key-format) or derived-from-or-self'
                      + '(public-key-format, "ct:subject-public-key-'
                      + 'info-format")';
                 }
                 refine "tls:inline-or-keystore/tls:central-keystore/"
                      + "tls:central-keystore-reference" {
                   must 'not(deref(.)/../ks:public-key-format) or '
                      + 'derived-from-or-self(deref(.)/../ks:public-'
                      + 'key-format, "ct:subject-public-key-info-'
                      + 'format")';
                 }
               }
             }
           }
           case tls13-epsk {
             if-feature "tls:client-ident-tls13-epsk";
             container tls13-epsk {
               description
                 "An External Pre-Shared Key (EPSK) is established
                 or provisioned out-of-band, i.e., not from a TLS
                 connection.  An EPSK is a tuple of (Base Key,
                 External Identity, Hash).  When PSKs are provisioned
                 out of band, the PSK identity and the KDF hash algorithm
                 to be used with the PSK must also be provisioned.";
               reference
                 "RFC 8446: The Transport Layer Security (TLS)
                            Protocol Version 1.3, Section 4.2.11
                  RFC 9257: Guidance for External Pre-Shared Key
                            (PSK) Usage in TLS, Section 6
                  RFC 9258: Importing External Pre-Shared Keys
                            (PSKs) for TLS 1.3, Section 5.1";
               uses ks:inline-or-keystore-symmetric-key-grouping;
               leaf external-identity {
                 type string;
                 mandatory true;
                 description
                   "A sequence of bytes used to identify
                    an EPSK. A label for a pre-shared key established
                    externally.";
                 reference
                   "RFC 8446: The Transport Layer Security (TLS)
                              Protocol Version 1.3, Section 4.2.11
                    RFC 9257: Guidance for External Pre-Shared Key
                              (PSK) Usage in TLS, Section 4.1";
               }
               leaf hash {
                 type tlscmn:epsk-supported-hash;
                 default sha-256;
                 description
                   "For externally established PSKs, the Hash algorithm
                    must be set when the PSK is established or default
                    to SHA-256 if no such algorithm is defined.";
                 reference
                   "RFC 8446: The Transport Layer Security (TLS)
                              Protocol Version 1.3, Section 4.2.11";
               }
               leaf context {
                 type string;
                 description
                   "The context used to determine the EPSK, if
                    any exists. For example, context may include
                    information about peer roles or identities
                    to mitigate Selfie-style reflection attacks.";
                 reference
                   "RFC 9258: Importing External Pre-Shared Keys
                              (PSKs) for TLS 1.3, Section 5.1 ";
               }
              /*leaf target-protocol {
                 type uint16;
                 description
                   "Specifies the protocol for which a PSK is
                    imported for use.";
                 reference
                   "RFC 9258: Importing External Pre-Shared Keys
                              (PSKs) for TLS 1.3, Section 3 ";
               }*/
               leaf target-kdf {
                 type uint16;
                 description
                   "The KDF for which a PSK is imported for use.";
                 reference
                   "RFC 9258: Importing External Pre-Shared Keys
                              (PSKs) for TLS 1.3, Section 3";
               }
             }
           }
         }
       } // container client-identity
}
