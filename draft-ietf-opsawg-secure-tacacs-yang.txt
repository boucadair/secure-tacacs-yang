



Operations and Management Area Working Group           M. Boucadair, Ed.
Internet-Draft                                                    Orange
Intended status: Informational                          11 December 2024
Expires: 14 June 2025


 A YANG Data Model for Terminal Access Controller Access-Control System
                             Plus (TACACS+)
              draft-ietf-opsawg-secure-tacacs-yang-latest

Abstract

   This document defines a Terminal Access Controller Access-Control
   System Plus (TACACS+) client YANG module that augments the System
   Management data model, defined in RFC 7317, to allow devices to make
   use of TACACS+ servers for centralized Authentication, Authorization,
   and Accounting (AAA).  Specifically, this document defines a YANG
   module for TACACS+ over TLS 1.3.

   This document obsoletes RFC 9105

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://boucadair.github.io/secure-tacacs-yang/draft-boucadair-
   opsawg-secure-tacacs-yang.html.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-ietf-opsawg-
   secure-tacacs-yang/.

   Discussion of this document takes place on the Operations and
   Management Area Working Group Working Group mailing list
   (mailto:opsawg@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/opsawg/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/opsawg/.

   Source for this draft and an issue tracker can be found at
   https://github.com/boucadair/secure-tacacs-yang.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 14 June 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
     2.1.  Tree Diagrams
   3.  Design of the TACACS+ Data Model
   4.  TACACS+ Client Module
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Appendix A.  Full Tree
   Acknowledgments
   Author's Address

1.  Introduction

   [RFC9105] defines a YANG module ("ietf-system-tacacs-plus") that
   augments the System Management data model defined in [RFC7317] for
   the management of Terminal Access Controller Access-Control System
   Plus (TACACS+) clients.  Typically, the "ietf-system-tacacs-plus"
   module is used to configure a TACACS+ client on a device to support
   deployment scenarios with centralized authentication, authorization,
   and accounting servers.

   This document defines a YANG module for managing TACACS+ client,
   including TACACS+ over TLS 1.3 clients
   [I-D.ietf-opsawg-tacacs-tls13].  This document obsoletes [RFC9105].

   The YANG module in this document conforms to the Network Management
   Datastore Architecture (NMDA) defined in [RFC8342].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The following terms are defined in [RFC6241] and are used in this
   specification:

   *  configuration data

   *  state data

   The following terms are defined in [RFC7950] and are used in this
   specification:

   *  augment

   *  data model

   *  data node

   The terminology for describing YANG data models is found in
   [RFC7950].

   The document uses the terms defined in Section 2 of
   [I-D.ietf-opsawg-tacacs-tls13] and Section 3 of [RFC8907].

   'client' refers to TACACS+ client, while 'server' refers to TACACS+
   server.

2.1.  Tree Diagrams

   The tree diagram used in this document follows the notation defined
   in [RFC8340].

3.  Design of the TACACS+ Data Model

   This module is used to configure a TACACS+ client on a device to
   support deployment scenarios with centralized authentication,
   authorization, and accounting servers.  Authentication is used to
   validate a user's username and password, authorization allows the
   user to access and execute commands at various privilege levels
   assigned to the user, and accounting keeps track of the activity of a
   user who has accessed the device.

   The ietf-system-tacacs-plus module augments the "/sys:system" path
   defined in the ietf-system module with the contents of the "tacacs-
   plus" grouping.  Therefore, a device can use local, RADIUS, or
   TACACS+ authentication to validate users who attempt to access the
   router by several mechanisms, e.g., a command line interface or a
   web-based user interface.

   The "server" list, which is directly under the "tacacs-plus"
   container, holds a list of TACACS+ servers and uses server-type to
   distinguish between Authentication, Authorization, and Accounting
   (AAA) services.  The list of servers is for redundancy.

   When there are multiple interfaces connected to the TACACS+ client or
   server, the source address of outgoing TACACS+ packets could be
   specified, or the source address could be specified through the
   interface IP address setting or derived from the outbound interface
   from the local Forwarding Information Base (FIB).  For the TACACS+
   server located in a Virtual Private Network (VPN), a VPN Routing and
   Forwarding (VRF) instance needs to be specified.

   The "statistics" container under the "server list" is a collection of
   read-only counters for sent and received messages from a configured
   server.

   The YANG module for TACACS+ client has the following structure:

   module: ietf-system-secure-tacacs

     augment /sys:system/sys-tcs-plus:tacacs-plus:
       +--rw client-credentials* [id]
       |  +--rw id                       string
       |  +--rw (auth-type)?
       |     +--:(certificate)
       |     |  ...
       |     +--:(raw-public-key) {tlsc:client-ident-raw-public-key}?
       |     |  ...
       |     +--:(tls13-epsk) {tlsc:client-ident-tls13-epsk}?
       |        ...
       +--rw server-credentials* [id]
          +--rw id                 string
          +--rw ca-certs!
          |  ...
          +--rw ee-certs!
          |  ...
          +--rw raw-public-keys! {tlsc:server-auth-raw-public-key}?
          |  ...
          +--rw tls13-epsks?       empty {tlsc:server-auth-tls13-epsk}?
     augment /sys:system/sys-tcs-plus:tacacs-plus/sys-tcs-plus:server:
       +--rw domain-name?      inet:domain-name
     augment /sys:system/sys-tcs-plus:tacacs-plus/sys-tcs-plus:server
               /sys-tcs-plus:security:
       +--:(tls)
          +--rw client-identity!
          |  +--rw (ref-or-explicit)?
          |     +--:(ref)
          |     |  +--rw credentials-reference?
          |     |          secure-tacacs:client-credentials-ref
          |     +--:(explicit)
          |        +--rw (auth-type)?
          |           +--:(certificate)
          |           |  +--rw certificate
          |           |     ...
          |           +--:(raw-public-key)
          |           |        {tlsc:client-ident-raw-public-key}?
          |           |  ...
          |           +--:(tls13-epsk) {tlsc:client-ident-tls13-epsk}?
          |              ...
          +--rw server-authentication
          |  +--rw (ref-or-explicit)?
          |     +--:(ref)
          |     |  +--rw credentials-reference?
          |     |          secure-tacacs:server-credentials-ref
          |     +--:(explicit)
          |        +--rw ca-certs!
          |        |  ...
          |        +--rw ee-certs!
          |        |  ...
          |        +--rw raw-public-keys!
          |        |       {tlsc:server-auth-raw-public-key}?
          |        |  ...
          |        +--rw tls13-epsks?             empty
          |                {tlsc:server-auth-tls13-epsk}?
          +--rw hello-params {tlscmn:hello-params}?
             +--rw tls-versions
             |  +--rw min?   identityref
             |  +--rw max?   identityref
             +--rw cipher-suites
                +--rw cipher-suite*   tlscsa:tls-cipher-suite-algorithm

   The module is designed to cover the following key requirements
   specified in [I-D.ietf-opsawg-tacacs-tls13]:

   *  TLS 1.3 [RFC8446] MUST be used for transport.

   *  Earlier TLS versions TLS MUST NOT be used.

   *  The cipher suites offered or accepted SHOULD be configurable.

   *  Implementations MAY support Raw Public Keys and PSK.

   *  Implementations MUST support the ability to configure the server's
      domain name

   The following data nodes are supported:

   'client-credentials' and 'server-credentials':  Defines a set
      credentials that can be globally provisioned and then referenced
      under specific servers.

   'domain-name':  Provides a domain name of the server per Section 3.3
      of [I-D.ietf-opsawg-tacacs-tls13].

   'client-identity':  Specifies the identity credentials that the
      client may present when establishing a connection to a server.
      Both explicit and reference are supported.

   'server-authentication':  Specifies how a client authenticates
      servers.  Both explicit and reference are supported.

   'hello-params':  Controls TLS versions and cipher suites.

   'keepalives':  Providers a set of parameters for testing the
      aliveness of the server.

4.  TACACS+ Client Module

   This module uses types and groupings defined in [RFC6991], [RFC8341],
   [RFC8343], [RFC8529], [RFC9640], [RFC9641], [RFC9642], and [RFC9645].

   The module augments [RFC7317].

   The module also cites [RFC9257], [RFC9258], [RFC9258], and [RFC6520].

   <CODE BEGINS> file "ietf-system-tacacs-plus@2024-12-11.yang"
   module ietf-system-secure-tacacs {
     yang-version 1.1;
     namespace "urn:ietf:params:xml:ns:yang:ietf-system-secure-tacacs";
     prefix secure-tacacs;

     import ietf-inet-types {
       prefix inet;
       reference
         "RFC 6991: Common YANG Data Types";
     }
     import ietf-keystore {
       prefix ks;
       reference
         "RFC 9642: A YANG Data Model for a Keystore";
     }
     import ietf-truststore {
       prefix ts;
       reference
         "RFC 9641: A YANG Data Model for a Truststore";
     }
     import ietf-tls-client {
       prefix tlsc;
       reference
         "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
     }
     import ietf-netconf-acm {
       prefix nacm;
       reference
         "RFC 8341: Network Configuration Access Control Model";
     }
     import ietf-crypto-types {
       prefix ct;
       reference
         "RFC 9640: YANG Data Types and Groupings for Cryptography";
     }
     import ietf-tls-common {
       prefix tlscmn;
       reference
         "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
     }
     import ietf-system {
       prefix sys;
       reference
         "RFC 7317: A YANG Data Model for System Management";
     }
     import ietf-system-tacacs-plus {
       prefix sys-tcs-plus;
       reference
         "RFC 9105: A YANG Data Model for Terminal Access Controller
                    Access-Control System Plus (TACACS+)";
     }

     organization
       "IETF OPSAWG (Operations and Management Area Working Group)";
     contact
       "WG Web:   <https://datatracker.ietf.org/wg/opsawg/>
        WG List:  <mailto:opsawg@ietf.org>

        Editor:   Mohamed Boucadair
                  <mailto:mohamed.boucadair@orange.com>";
     description
       "This module provides configuration of TACACS+ TLS clients.

        Copyright (c) 2024 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Revised BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (https://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see the
        RFC itself for full legal notices.";

     revision 2024-05-23 {
       description
         "Initial revision.";
       reference
         "RFC XXXX: A YANG Model for Terminal Access Controller
                    Access-Control System Plus (TACACS+) over TLS 1.3";
     }

     typedef client-credentials-ref {
       type leafref {
         path "/sys:system/sys-tcs-plus:tacacs-plus"
            + "/secure-tacacs:client-credentials/secure-tacacs:id";
       }
       description
         "Defines a type to reference client credentials.";
     }

     typedef server-credentials-ref {
       type leafref {
         path "/sys:system/sys-tcs-plus:tacacs-plus"
            + "/secure-tacacs:server-credentials/secure-tacacs:id";
       }
       description
         "Defines a type to reference server credentials.";
     }

     grouping certificate {
       description
         "Specifies the client identity using a certificate.";
       uses "ks:inline-or-keystore-end-entity-cert-with-key-"
          + "grouping" {
         refine "inline-or-keystore/inline/inline-definition" {
           must 'not(public-key-format) or derived-from-or-self'
              + '(public-key-format, "ct:subject-public-key-'
              + 'info-format")';
         }
         refine "inline-or-keystore/central-keystore/"
              + "central-keystore-reference/asymmetric-key" {
           must 'not(deref(.)/../ks:public-key-format) or '
              + 'derived-from-or-self(deref(.)/../ks:public-'
              + 'key-format, "ct:subject-public-key-info-'
              + 'format")';
         }
       }
     }

     grouping raw-private-key {
       description
         "Specifies the client identity using a raw private
          key.";
       uses ks:inline-or-keystore-asymmetric-key-grouping {
         refine "inline-or-keystore/inline/inline-definition" {
           must 'not(public-key-format) or derived-from-or-self'
              + '(public-key-format, "ct:subject-public-key-'
              + 'info-format")';
         }
         refine "inline-or-keystore/central-keystore/"
              + "central-keystore-reference" {
           must 'not(deref(.)/../ks:public-key-format) or '
              + 'derived-from-or-self(deref(.)/../ks:public-'
              + 'key-format, "ct:subject-public-key-info-format")';
         }
       }
     }

     grouping tls13-epsk {
       description
         "An External Pre-Shared Key (EPSK) is established
          or provisioned out-of-band, i.e., not from a TLS
          connection.  An EPSK is a tuple of (Base Key,
          External Identity, Hash).  When PSKs are provisioned
          out of band, the PSK identity and the KDF hash algorithm
          to be used with the PSK must also be provisioned.";
       reference
         "RFC 8446: The Transport Layer Security (TLS) Protocol
                    Version 1.3, Section 4.2.11
          RFC 9257: Guidance for External Pre-Shared Key (PSK) Usage
                    in TLS, Section 6
          RFC 9258: Importing External Pre-Shared Keys (PSKs) for
                    TLS 1.3, Section 5.1";
       uses ks:inline-or-keystore-symmetric-key-grouping;
       leaf external-identity {
         type string;
         mandatory true;
         description
           "A sequence of bytes used to identify an EPSK. A label for
            a pre-shared key established externally.";
         reference
           "RFC 8446: The Transport Layer Security (TLS) Protocol
                      Version 1.3, Section 4.2.11
            RFC 9257: Guidance for External Pre-Shared Key (PSK)
                      Usage in TLS, Section 4.1";
       }
       leaf hash {
         type tlscmn:epsk-supported-hash;
         default "sha-256";
         description
           "For externally established PSKs, the Hash algorithm must be
            set when the PSK is established or default to SHA-256 if no
            such algorithm is defined.";
         reference
           "RFC 8446: The Transport Layer Security (TLS) Protocol
                      Version 1.3, Section 4.2.11";
       }
       leaf context {
         type string;
         description
           "The context used to determine the EPSK, if any exists. For
            example, context may include information about peer roles or
            identities to mitigate Selfie-style reflection attacks.";
         reference
           "RFC 9258: Importing External Pre-Shared Keys (PSKs) for
                      TLS 1.3, Section 5.1 ";
       }
       leaf target-protocol {
         type uint16;
         description
           "Specifies the protocol for which a PSK is imported for
            use.";
         reference
           "RFC 9258: Importing External Pre-Shared Keys (PSKs) for
                      TLS 1.3, Section 3 ";
       }
       leaf target-kdf {
         type uint16;
         description
           "The KDF for which a PSK is imported for use.";
         reference
           "RFC 9258: Importing External Pre-Shared Keys (PSKs) for
                      TLS 1.3, Section 3";
       }
     }

     grouping client-identity {
       description
         "Identity credentials that the TLS client may present when
          establishing a connection to a TLS server. When configured,
          and requested by the TLS server when establishing a TLS
          session, these credentials are passed in the Certificate
          message.";
       reference
         "RFC 8446: The Transport Layer Security (TLS) Protocol
                    Version 1.3, Section 4.4.2";
       nacm:default-deny-write;
       choice auth-type {
         //default "certificate";
         //mandatory true;
         description
           "A choice amongst authentication types, of which one must
            be enabled and selected.";
         case certificate {
           container certificate {
             description
               "Specifies the client identity using a certificate.";
             uses certificate;
           }
         }
         case raw-public-key {
           if-feature "tlsc:client-ident-raw-public-key";
           container raw-private-key {
             description
               "Specifies the client identity using RPK.";
             uses raw-private-key;
           }
         }
         case tls13-epsk {
           if-feature "tlsc:client-ident-tls13-epsk";
           container tls13-epsk {
             description
               "An EPSK is established or provisioned out-of-band.";
             uses tls13-epsk;
           }
         }
       }
     }

     grouping client-identity-with-ref {
       description
         "Identity credentials that the TLS client may present when
          establishing a connection to a TLS server. When configured,
          and requested by the TLS server when establishing a TLS
          session, these credentials are passed in the Certificate
          message.";
       choice ref-or-explicit {
         description
           "A choice between a reference of explicit configuration.";
         case ref {
           description
             "Provides a reference.";
           leaf credentials-reference {
             type secure-tacacs:client-credentials-ref;
             description
               "Specifies the client credentials reference.";
           }
         }
         case explicit {
           description
             "Explicit configuration.";
           uses client-identity;
         }
       }
     }

     grouping server-authentication {
       description
         "Specifies how the TLS client can authenticate TLS servers.
          Any combination of credentials is additive and unordered.";
       nacm:default-deny-write;
       container ca-certs {
         presence "Indicates that CA certificates have been configured.
                   This statement is present so the mandatory descendant
                   nodes do not imply that this node must be
                   configured.";
         description
           "A set of CA certificates used by the TLS client to
            authenticate TLS server certificates.
            A server certificate is authenticated if it has a valid
            chain of trust to a configured CA certificate.";
         reference
           "RFC 9641: A YANG Data Model for a Truststore";
         uses ts:inline-or-truststore-certs-grouping;
       }
       container ee-certs {
         presence "Indicates that EE certificates have been configured.
                   This statement is present so the mandatory descendant
                   nodes do not imply that this node must be
                   configured.";
         description
           "A set of server certificates (i.e., end entity certificates)
            used by the TLS client to authenticate certificates
            presented by TLS servers. A server certificate is
            authenticated if it is an exact match to a configured server
            certificate.";
         reference
           "RFC 9641: A YANG Data Model for a Truststore";
         uses ts:inline-or-truststore-certs-grouping;
       }
       container raw-public-keys {
         if-feature "tlsc:server-auth-raw-public-key";
         presence "Indicates that raw public keys have been configured.
                   This statement is present so the mandatory descendant
                   nodes do not imply that this node must be
                   configured.";
         description
           "A set of raw public keys used by the TLS client to
            authenticate raw public keys presented by the TLS server.
            A raw public key is authenticated if it is an exact match
            to a configured raw public key.";
         reference
           "RFC 9641: A YANG Data Model for a Truststore";
         uses ts:inline-or-truststore-public-keys-grouping {
           refine "inline-or-truststore/inline/inline-definition/"
                + "public-key" {
             must 'derived-from-or-self(public-key-format,'
                + ' "ct:subject-public-key-info-format")';
           }
           refine "inline-or-truststore/central-truststore/"
                + "central-truststore-reference" {
             must 'not(deref(.)/../ts:public-key/ts:public-key-'
                + 'format[not(derived-from-or-self(., "ct:subject-'
                + 'public-key-info-format"))])';
           }
         }
       }
       leaf tls13-epsks {
         if-feature "tlsc:server-auth-tls13-epsk";
         type empty;
         description
           "Indicates that the TLS client can authenticate TLS servers
            using configured external PSKs.";
       }
     }

     grouping server-authentication-with-ref {
       description
         "Specifies how the TLS client can authenticate TLS servers.";
       choice ref-or-explicit {
         description
           "A choice between a reference of explicit configuration.";
         case ref {
           description
             "Provides a reference.";
           leaf credentials-reference {
             type secure-tacacs:server-credentials-ref;
             description
               "Specifies the server credentials reference.";
           }
         }
         case explicit {
           description
             "Explicit configuration.";
           uses server-authentication;
         }
       }
     }

     grouping hello-params {
       description
         "Configurable parameters for the TLS hello message.";
       nacm:default-deny-write;
       uses tlscmn:hello-params-grouping {
         refine "tls-versions/min" {
           must "not(derived-from-or-self(current(), "
              + "'tlscmn:tls12'))" {
             error-message
                   "TLS 1.2 is not supported as min TLS version";
           }
         }
         refine "tls-versions/max" {
           must "not(derived-from-or-self(current(), "
              + "'tlscmn:tls12'))" {
             error-message
                   "TLS 1.2 is not supported as max TLS version";
           }
         }
       }
     }

     grouping tls-client {
       description
         "A grouping for configuring a TLS client without any
          consideration for how an underlying TCP session is
          established.";
       container client-identity {
         presence
           "Indicates that a TLS-level client identity has been
            configured.
            This statement is present so the mandatory descendant do not
            imply that this node must be configured.";
         description
           "Identity credentials the TLS client may present when
            establishing a connection to a TLS server.";
         //uses client-identity;
         uses client-identity-with-ref;
       }
       container server-authentication {
         must 'ca-certs or ee-certs or raw-public-keys or tls13-epsks';
         description
           "Specifies how the TLS client can authenticate TLS servers.";
         //uses server-authentication;
         uses server-authentication-with-ref;
       }
       container hello-params {
         if-feature "tlscmn:hello-params";
         description
           "Configurable parameters for the TLS hello message.";
         uses hello-params;
       }
     }

   /*
     grouping tcp-server-info {
       description
         "A grouping for configuring the information to contact
          a TCP server.";
       list remote-address {
         key "address";
         description
           "A server instance may be reachable using multiple IP address
            and port numbers. For example, use the same port number in
            different address families or different port numbers in the
            same address family.";
         leaf address {
           type inet:ip-address;
           description
             "The remote IP address to reach a server.";
         }
         leaf port-number {
           type inet:port-number;
           description
             "The remote port number of the server.";
         }
       }
     }*/

     // currently not used

     grouping tls-grouping-reuse {
       description
         "A grouping for TLS with TLS1.2 and keepalive removed.";
       uses tlsc:tls-client-grouping {
         refine "client-identity/auth-type/tls12-psk" {
           if-feature "not tlsc:client-ident-tls12-psk";
         }
         refine "server-authentication/tls12-psks" {
           if-feature "not tlsc:server-auth-tls12-psk";
         }
         refine "hello-params/tls-versions/min" {
           must "not(derived-from-or-self(current(), "
              + "'tlscmn:tls12'))" {
             error-message
                   "TLS 1.2 is not supported as min TLS version";
           }
         }
         refine "hello-params/tls-versions/max" {
           must "not(derived-from-or-self(current(), "
              + "'tlscmn:tls12'))" {
             error-message
                   "TLS 1.2 is not supported as max TLS version";
           }
         }
         refine "keepalives" {
           if-feature "not tlsc:tls-client-keepalives";
         }
       }
     }

     augment "/sys:system/sys-tcs-plus:tacacs-plus" {
       description
         "A list of client credentials to be referenced.";
       list client-credentials {
         key "id";
         description
           "Identity credentials the TLS client may present when
            establishing a connection to a TLS server.";
         nacm:default-deny-write;
         leaf id {
           type string;
           description
             "A credential identifier.";
         }
         uses client-identity;
       }
       list server-credentials {
         key "id";
         description
           "Identity credentials the TLS client may present when
            establishing a connection to a TLS server.";
         nacm:default-deny-write;
         leaf id {
           type string;
           description
             "A credential identifier.";
         }
         uses server-authentication;
       }
     }

     augment "/sys:system/sys-tcs-plus:tacacs-plus"
           + "/sys-tcs-plus:server" {
       description
         "Adds server's domain name.";
       /*uses tcp-server-info {
         refine "remote-address/address" {
           must 'not(../../sys-tcs-plus:address)' {
             error-message
               "Either use the list of bind points or RFC 9105 address
                data node, not both.";
           }
         }
         refine "remote-address/port-number" {
           must 'not(../../sys-tcs-plus:port)' {
             error-message
               "Either use the list of bind points or RFC 9105 port
                data node, not both.";
           }
           default "1234"; // to be replaced by TACACS-TLS-PORT
         }
       }*/
       leaf domain-name {
         type inet:domain-name;
         description
           "Provides a domain name of the TACACS+ server.";
       }
     }

     augment "/sys:system/sys-tcs-plus:tacacs-plus/sys-tcs-plus:server"
           + "/sys-tcs-plus:security" {
       description
         "Adds TLS case.";
       case tls {
         description
           "TLS is used.";
         uses tls-client;
         //uses client-identity-with-ref;
       }
     }
   }
   <CODE ENDS>

5.  Security Considerations

   This section uses the template described in Section 3.7 of
   [I-D.ietf-netmod-rfc8407bis].

   The YANG module specified in this document defines schema for data
   that is designed to be accessed via network management protocols such
   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF layer
   is the secure transport layer, and the mandatory-to-implement secure
   transport is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer
   is HTTPS, and the mandatory-to-implement secure transport is TLS
   [RFC8446].

   The Network Configuration Access Control Model (NACM) [RFC8341]
   provides the means to restrict access for particular NETCONF or
   RESTCONF users to a preconfigured subset of all available NETCONF or
   RESTCONF protocol operations and content.

   There are a number of data nodes defined in this YANG module that are
   writable/creatable/deletable (i.e., config true, which is the
   default).  These data nodes may be considered sensitive or vulnerable
   in some network environments.  Write operations (e.g., edit-config)
   and delete operations to these data nodes without proper protection
   or authentication can have a negative effect on network operations.
   Specifically, the following subtrees and data nodes have particular
   sensitivities/vulnerabilities:

   /system/tacacs-plus/server:  This list contains the data nodes used
      to control the TACACS+ servers used by the device.  Unauthorized
      access to this list could enable an attacker to assume complete
      control over the device by pointing to a compromised TACACS+
      server, or to modify the counters to hide attacks against the
      device.

   /system/tacacs-plus/server/shared-secret:  This leaf controls the key
      known to both the TACACS+ client and server.  Unauthorized access
      to this leaf could make the device vulnerable to attacks;
      therefore, it has been restricted using the "default-deny-all"
      access control defined in [RFC8341].  When setting, it is highly
      recommended that the leaf is at least 32 characters long and
      sufficiently complex with a mix of different character types,
      i.e., upper case, lower case, numeric, and punctuation.

   Some of the readable data nodes in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control read access (e.g., via get, get-config, or
   notification) to these data nodes.  Specifically, the following
   subtrees and data nodes have particular sensitivities/
   vulnerabilities:

    'xxx':
    :  xxxx.

   This YANG module uses groupings from other YANG modules that define
   nodes that may be considered sensitive or vulnerable in network
   environments.  Refer to Section 5.3 of
   [I-D.ietf-netconf-tls-client-server] for information as to which
   nodes may be considered sensitive or vulnerable in network
   environments.

6.  IANA Considerations

   IANA is requested to update the following URI in the "ns" subregistry
   within the "IETF XML Registry" [RFC3688]:

      URI:  urn:ietf:params:xml:ns:yang:ietf-system-tacacs-plus
      Registrant Contact:  The IESG.
      XML:  N/A; the requested URI is an XML namespace.

   IANA is requested to register the following YANG module in the "YANG
   Module Names" registry [RFC6020] within the "YANG Parameters"
   registry group:

      Name:  ietf-system-tacacs-plus
      Namespace:  urn:ietf:params:xml:ns:yang:ietf-system-tacacs-plus
      Prefix:  sys-tcs-plus
      Maintained by IANA?  N
      Reference:  RFC XXXX

7.  References

7.1.  Normative References

   [I-D.ietf-netconf-tls-client-server]
              Watsen, K., "YANG Groupings for TLS Clients and TLS
              Servers", Work in Progress, Internet-Draft, draft-ietf-
              netconf-tls-client-server-41, 16 March 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-netconf-
              tls-client-server-41>.

   [I-D.ietf-opsawg-tacacs-tls13]
              Dahm, T., Heasley, J., dcmgash@cisco.com, and A. Ota,
              "Terminal Access Controller Access-Control System Plus
              (TACACS+) over TLS 1.3", Work in Progress, Internet-Draft,
              draft-ietf-opsawg-tacacs-tls13-15, 18 November 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-opsawg-
              tacacs-tls13-15>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              DOI 10.17487/RFC3688, January 2004,
              <https://www.rfc-editor.org/rfc/rfc3688>.

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <https://www.rfc-editor.org/rfc/rfc6020>.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <https://www.rfc-editor.org/rfc/rfc6241>.

   [RFC6242]  Wasserman, M., "Using the NETCONF Protocol over Secure
              Shell (SSH)", RFC 6242, DOI 10.17487/RFC6242, June 2011,
              <https://www.rfc-editor.org/rfc/rfc6242>.

   [RFC6520]  Seggelmann, R., Tuexen, M., and M. Williams, "Transport
              Layer Security (TLS) and Datagram Transport Layer Security
              (DTLS) Heartbeat Extension", RFC 6520,
              DOI 10.17487/RFC6520, February 2012,
              <https://www.rfc-editor.org/rfc/rfc6520>.

   [RFC6991]  Schoenwaelder, J., Ed., "Common YANG Data Types",
              RFC 6991, DOI 10.17487/RFC6991, July 2013,
              <https://www.rfc-editor.org/rfc/rfc6991>.

   [RFC7317]  Bierman, A. and M. Bjorklund, "A YANG Data Model for
              System Management", RFC 7317, DOI 10.17487/RFC7317, August
              2014, <https://www.rfc-editor.org/rfc/rfc7317>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <https://www.rfc-editor.org/rfc/rfc7950>.

   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", RFC 8040, DOI 10.17487/RFC8040, January 2017,
              <https://www.rfc-editor.org/rfc/rfc8040>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8341]  Bierman, A. and M. Bjorklund, "Network Configuration
              Access Control Model", STD 91, RFC 8341,
              DOI 10.17487/RFC8341, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8341>.

   [RFC8342]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,
              and R. Wilton, "Network Management Datastore Architecture
              (NMDA)", RFC 8342, DOI 10.17487/RFC8342, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8342>.

   [RFC8343]  Bjorklund, M., "A YANG Data Model for Interface
              Management", RFC 8343, DOI 10.17487/RFC8343, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8343>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

   [RFC8529]  Berger, L., Hopps, C., Lindem, A., Bogdanovic, D., and X.
              Liu, "YANG Data Model for Network Instances", RFC 8529,
              DOI 10.17487/RFC8529, March 2019,
              <https://www.rfc-editor.org/rfc/rfc8529>.

   [RFC9257]  Housley, R., Hoyland, J., Sethi, M., and C. A. Wood,
              "Guidance for External Pre-Shared Key (PSK) Usage in TLS",
              RFC 9257, DOI 10.17487/RFC9257, July 2022,
              <https://www.rfc-editor.org/rfc/rfc9257>.

   [RFC9258]  Benjamin, D. and C. A. Wood, "Importing External Pre-
              Shared Keys (PSKs) for TLS 1.3", RFC 9258,
              DOI 10.17487/RFC9258, July 2022,
              <https://www.rfc-editor.org/rfc/rfc9258>.

   [RFC9640]  Watsen, K., "YANG Data Types and Groupings for
              Cryptography", RFC 9640, DOI 10.17487/RFC9640, October
              2024, <https://www.rfc-editor.org/rfc/rfc9640>.

   [RFC9641]  Watsen, K., "A YANG Data Model for a Truststore",
              RFC 9641, DOI 10.17487/RFC9641, October 2024,
              <https://www.rfc-editor.org/rfc/rfc9641>.

   [RFC9642]  Watsen, K., "A YANG Data Model for a Keystore", RFC 9642,
              DOI 10.17487/RFC9642, October 2024,
              <https://www.rfc-editor.org/rfc/rfc9642>.

   [RFC9645]  Watsen, K., "YANG Groupings for TLS Clients and TLS
              Servers", RFC 9645, DOI 10.17487/RFC9645, October 2024,
              <https://www.rfc-editor.org/rfc/rfc9645>.

7.2.  Informative References

   [I-D.ietf-netmod-rfc8407bis]
              Bierman, A., Boucadair, M., and Q. Wu, "Guidelines for
              Authors and Reviewers of Documents Containing YANG Data
              Models", Work in Progress, Internet-Draft, draft-ietf-
              netmod-rfc8407bis-21, 13 November 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-netmod-
              rfc8407bis-21>.

   [RFC8340]  Bjorklund, M. and L. Berger, Ed., "YANG Tree Diagrams",
              BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8340>.

   [RFC8907]  Dahm, T., Ota, A., Medway Gash, D.C., Carrel, D., and L.
              Grant, "The Terminal Access Controller Access-Control
              System Plus (TACACS+) Protocol", RFC 8907,
              DOI 10.17487/RFC8907, September 2020,
              <https://www.rfc-editor.org/rfc/rfc8907>.

   [RFC9105]  Wu, B., Ed., Zheng, G., and M. Wang, Ed., "A YANG Data
              Model for Terminal Access Controller Access-Control System
              Plus (TACACS+)", RFC 9105, DOI 10.17487/RFC9105, August
              2021, <https://www.rfc-editor.org/rfc/rfc9105>.

Appendix A.  Full Tree

   The full tree structure is shown below:

   =============== NOTE: '\' line wrapping per RFC 8792 ================

   module: ietf-system-tacacs-plus

     augment /sys:system:
       +--rw tacacs-plus
          +--rw client-credentials* [id]
          |  +--rw id                       string
          |  +--rw (auth-type)?
          |     +--:(certificate)
          |     |  +--rw certificate
          |     |     +--rw (inline-or-keystore)
          |     |        +--:(inline) {inline-definitions-supported}?
          |     |        |  +--rw inline-definition
          |     |        |     +--rw public-key-format?
          |     |        |     |       identityref
          |     |        |     +--rw public-key?
          |     |        |     |       binary
          |     |        |     +--rw private-key-format?
          |     |        |     |       identityref
          |     |        |     +--rw (private-key-type)
          |     |        |     |  +--:(cleartext-private-key)
          |     |        |     |  |        {cleartext-private-keys}?
          |     |        |     |  |  +--rw cleartext-private-key?
          |     |        |     |  |          binary
          |     |        |     |  +--:(hidden-private-key)
          |     |        |     |  |        {hidden-private-keys}?
          |     |        |     |  |  +--rw hidden-private-key?
          |     |        |     |  |          empty
          |     |        |     |  +--:(encrypted-private-key)
          |     |        |     |           {encrypted-private-keys}?
          |     |        |     |     +--rw encrypted-private-key
          |     |        |     |        +--rw encrypted-by
          |     |        |     |        +--rw encrypted-value-format
          |     |        |     |        |       identityref
          |     |        |     |        +--rw encrypted-value
          |     |        |     |                binary
          |     |        |     +--rw cert-data?
          |     |        |     |       end-entity-cert-cms
          |     |        |     +---n certificate-expiration
          |     |        |     |       {certificate-expiration-\
                                                          notification}?
          |     |        |     |  +-- expiration-date
          |     |        |     |          yang:date-and-time
          |     |        |     +---x generate-csr {csr-generation}?
          |     |        |        +---w input
          |     |        |        |  +---w csr-format    identityref
          |     |        |        |  +---w csr-info      csr-info
          |     |        |        +--ro output
          |     |        |           +--ro (csr-type)
          |     |        |              +--:(p10-csr)
          |     |        |                 +--ro p10-csr?   p10-csr
          |     |        +--:(central-keystore)
          |     |                 {central-keystore-supported,\
                                                       asymmetric-keys}?
          |     |           +--rw central-keystore-reference
          |     |              +--rw asymmetric-key?
          |     |              |       ks:central-asymmetric-key-ref
          |     |              |       {central-keystore-supported,\
                                                       asymmetric-keys}?
          |     |              +--rw certificate?      leafref
          |     +--:(raw-public-key) {tlsc:client-ident-raw-public-key}?
          |     |  +--rw raw-private-key
          |     |     +--rw (inline-or-keystore)
          |     |        +--:(inline) {inline-definitions-supported}?
          |     |        |  +--rw inline-definition
          |     |        |     +--rw public-key-format?
          |     |        |     |       identityref
          |     |        |     +--rw public-key?
          |     |        |     |       binary
          |     |        |     +--rw private-key-format?
          |     |        |     |       identityref
          |     |        |     +--rw (private-key-type)
          |     |        |        +--:(cleartext-private-key)
          |     |        |        |        {cleartext-private-keys}?
          |     |        |        |  +--rw cleartext-private-key?
          |     |        |        |          binary
          |     |        |        +--:(hidden-private-key)
          |     |        |        |        {hidden-private-keys}?
          |     |        |        |  +--rw hidden-private-key?
          |     |        |        |          empty
          |     |        |        +--:(encrypted-private-key)
          |     |        |                 {encrypted-private-keys}?
          |     |        |           +--rw encrypted-private-key
          |     |        |              +--rw encrypted-by
          |     |        |              +--rw encrypted-value-format
          |     |        |              |       identityref
          |     |        |              +--rw encrypted-value
          |     |        |                      binary
          |     |        +--:(central-keystore)
          |     |                 {central-keystore-supported,\
                                                       asymmetric-keys}?
          |     |           +--rw central-keystore-reference?
          |     |                   ks:central-asymmetric-key-ref
          |     +--:(tls13-epsk) {tlsc:client-ident-tls13-epsk}?
          |        +--rw tls13-epsk
          |           +--rw (inline-or-keystore)
          |           |  +--:(inline) {inline-definitions-supported}?
          |           |  |  +--rw inline-definition
          |           |  |     +--rw key-format?
          |           |  |     |       identityref
          |           |  |     +--rw (key-type)
          |           |  |        +--:(cleartext-symmetric-key)
          |           |  |        |  +--rw cleartext-symmetric-key?
          |           |  |        |          binary
          |           |  |        |          {cleartext-symmetric-keys}?
          |           |  |        +--:(hidden-symmetric-key)
          |           |  |        |        {hidden-symmetric-keys}?
          |           |  |        |  +--rw hidden-symmetric-key?
          |           |  |        |          empty
          |           |  |        +--:(encrypted-symmetric-key)
          |           |  |                 {encrypted-symmetric-keys}?
          |           |  |           +--rw encrypted-symmetric-key
          |           |  |              +--rw encrypted-by
          |           |  |              +--rw encrypted-value-format
          |           |  |              |       identityref
          |           |  |              +--rw encrypted-value
          |           |  |                      binary
          |           |  +--:(central-keystore)
          |           |           {central-keystore-supported,symmetric\
                                                                 -keys}?
          |           |     +--rw central-keystore-reference?
          |           |             ks:central-symmetric-key-ref
          |           +--rw external-identity                   string
          |           +--rw hash?
          |           |       tlscmn:epsk-supported-hash
          |           +--rw context?                            string
          |           +--rw target-protocol?                    uint16
          |           +--rw target-kdf?                         uint16
          +--rw server-credentials* [id]
          |  +--rw id                 string
          |  +--rw ca-certs!
          |  |  +--rw (inline-or-truststore)
          |  |     +--:(inline) {inline-definitions-supported}?
          |  |     |  +--rw inline-definition
          |  |     |     +--rw certificate* [name]
          |  |     |        +--rw name                      string
          |  |     |        +--rw cert-data
          |  |     |        |       trust-anchor-cert-cms
          |  |     |        +---n certificate-expiration
          |  |     |                {certificate-expiration-\
                                                          notification}?
          |  |     |           +-- expiration-date    yang:date-and-time
          |  |     +--:(central-truststore)
          |  |              {central-truststore-supported,certificates}?
          |  |        +--rw central-truststore-reference?
          |  |                ts:central-certificate-bag-ref
          |  +--rw ee-certs!
          |  |  +--rw (inline-or-truststore)
          |  |     +--:(inline) {inline-definitions-supported}?
          |  |     |  +--rw inline-definition
          |  |     |     +--rw certificate* [name]
          |  |     |        +--rw name                      string
          |  |     |        +--rw cert-data
          |  |     |        |       trust-anchor-cert-cms
          |  |     |        +---n certificate-expiration
          |  |     |                {certificate-expiration-\
                                                          notification}?
          |  |     |           +-- expiration-date    yang:date-and-time
          |  |     +--:(central-truststore)
          |  |              {central-truststore-supported,certificates}?
          |  |        +--rw central-truststore-reference?
          |  |                ts:central-certificate-bag-ref
          |  +--rw raw-public-keys! {tlsc:server-auth-raw-public-key}?
          |  |  +--rw (inline-or-truststore)
          |  |     +--:(inline) {inline-definitions-supported}?
          |  |     |  +--rw inline-definition
          |  |     |     +--rw public-key* [name]
          |  |     |        +--rw name                 string
          |  |     |        +--rw public-key-format    identityref
          |  |     |        +--rw public-key           binary
          |  |     +--:(central-truststore)
          |  |              {central-truststore-supported,public-keys}?
          |  |        +--rw central-truststore-reference?
          |  |                ts:central-public-key-bag-ref
          |  +--rw tls13-epsks?       empty
          |          {tlsc:server-auth-tls13-epsk}?
          +--rw server* [name]
          |  +--rw name                                         string
          |  +--rw server-type
          |  |       tacacs-plus-server-type
          |  +--rw domain-name?
          |  |       inet:domain-name
          |  +--rw address
          |  |       inet:host
          |  +--rw port?
          |  |       inet:port-number
          |  +--rw (security)
          |  |  +--:(tls)
          |  |  |  +--rw client-identity!
          |  |  |  |  +--rw (ref-or-explicit)?
          |  |  |  |     +--:(ref)
          |  |  |  |     |  +--rw credentials-reference?
          |  |  |  |     |          sys-tcs-plus:client-credentials-ref
          |  |  |  |     +--:(explicit)
          |  |  |  |        +--rw (auth-type)?
          |  |  |  |           +--:(certificate)
          |  |  |  |           |  +--rw certificate
          |  |  |  |           |     +--rw (inline-or-keystore)
          |  |  |  |           |        +--:(inline)
          |  |  |  |           |        |        {inline-definitions-\
                                                             supported}?
          |  |  |  |           |        |  +--rw inline-definition
          |  |  |  |           |        |     +--rw public-key-format?
          |  |  |  |           |        |     |       identityref
          |  |  |  |           |        |     +--rw public-key?
          |  |  |  |           |        |     |       binary
          |  |  |  |           |        |     +--rw private-key-format?
          |  |  |  |           |        |     |       identityref
          |  |  |  |           |        |     +--rw (private-key-type)
          |  |  |  |           |        |     |  +--:(cleartext-private\
                                                                   -key)
          |  |  |  |           |        |     |  |        {cleartext-\
                                                          private-keys}?
          |  |  |  |           |        |     |  |  +--rw cleartext-\
                                                            private-key?
          |  |  |  |           |        |     |  |          binary
          |  |  |  |           |        |     |  +--:(hidden-private-\
                                                                    key)
          |  |  |  |           |        |     |  |        {hidden-\
                                                          private-keys}?
          |  |  |  |           |        |     |  |  +--rw hidden-\
                                                            private-key?
          |  |  |  |           |        |     |  |          empty
          |  |  |  |           |        |     |  +--:(encrypted-private\
                                                                   -key)
          |  |  |  |           |        |     |           {encrypted-\
                                                          private-keys}?
          |  |  |  |           |        |     |     +--rw encrypted-\
                                                             private-key
          |  |  |  |           |        |     |        +--rw encrypted-\
                                                                      by
          |  |  |  |           |        |     |        +--rw encrypted-\
                                                            value-format
          |  |  |  |           |        |     |        |       \
                                                             identityref
          |  |  |  |           |        |     |        +--rw encrypted-\
                                                                   value
          |  |  |  |           |        |     |                binary
          |  |  |  |           |        |     +--rw cert-data?
          |  |  |  |           |        |     |       end-entity-cert-\
                                                                     cms
          |  |  |  |           |        |     +---n certificate-\
                                                              expiration
          |  |  |  |           |        |     |       {certificate-\
                                               expiration-notification}?
          |  |  |  |           |        |     |  +-- expiration-date
          |  |  |  |           |        |     |          yang:date-and-\
                                                                    time
          |  |  |  |           |        |     +---x generate-csr
          |  |  |  |           |        |             {csr-generation}?
          |  |  |  |           |        |        +---w input
          |  |  |  |           |        |        |  +---w csr-format
          |  |  |  |           |        |        |  |       identityref
          |  |  |  |           |        |        |  +---w csr-info
          |  |  |  |           |        |        |          csr-info
          |  |  |  |           |        |        +--ro output
          |  |  |  |           |        |           +--ro (csr-type)
          |  |  |  |           |        |              +--:(p10-csr)
          |  |  |  |           |        |                 +--ro p10-csr?
          |  |  |  |           |        |                         p10-\
                                                                     csr
          |  |  |  |           |        +--:(central-keystore)
          |  |  |  |           |                 {central-keystore-\
                                             supported,asymmetric-keys}?
          |  |  |  |           |           +--rw central-keystore-\
                                                               reference
          |  |  |  |           |              +--rw asymmetric-key?
          |  |  |  |           |              |       ks:central-\
                                                      asymmetric-key-ref
          |  |  |  |           |              |       {central-keystore\
                                            -supported,asymmetric-keys}?
          |  |  |  |           |              +--rw certificate?
          |  |  |  |           |                      leafref
          |  |  |  |           +--:(raw-public-key)
          |  |  |  |           |        {tlsc:client-ident-raw-public-\
                                                                   key}?
          |  |  |  |           |  +--rw raw-private-key
          |  |  |  |           |     +--rw (inline-or-keystore)
          |  |  |  |           |        +--:(inline)
          |  |  |  |           |        |        {inline-definitions-\
                                                             supported}?
          |  |  |  |           |        |  +--rw inline-definition
          |  |  |  |           |        |     +--rw public-key-format?
          |  |  |  |           |        |     |       identityref
          |  |  |  |           |        |     +--rw public-key?
          |  |  |  |           |        |     |       binary
          |  |  |  |           |        |     +--rw private-key-format?
          |  |  |  |           |        |     |       identityref
          |  |  |  |           |        |     +--rw (private-key-type)
          |  |  |  |           |        |        +--:(cleartext-private\
                                                                   -key)
          |  |  |  |           |        |        |        {cleartext-\
                                                          private-keys}?
          |  |  |  |           |        |        |  +--rw cleartext-\
                                                            private-key?
          |  |  |  |           |        |        |          binary
          |  |  |  |           |        |        +--:(hidden-private-\
                                                                    key)
          |  |  |  |           |        |        |        {hidden-\
                                                          private-keys}?
          |  |  |  |           |        |        |  +--rw hidden-\
                                                            private-key?
          |  |  |  |           |        |        |          empty
          |  |  |  |           |        |        +--:(encrypted-private\
                                                                   -key)
          |  |  |  |           |        |                 {encrypted-\
                                                          private-keys}?
          |  |  |  |           |        |           +--rw encrypted-\
                                                             private-key
          |  |  |  |           |        |              +--rw encrypted-\
                                                                      by
          |  |  |  |           |        |              +--rw encrypted-\
                                                            value-format
          |  |  |  |           |        |              |       \
                                                             identityref
          |  |  |  |           |        |              +--rw encrypted-\
                                                                   value
          |  |  |  |           |        |                      binary
          |  |  |  |           |        +--:(central-keystore)
          |  |  |  |           |                 {central-keystore-\
                                             supported,asymmetric-keys}?
          |  |  |  |           |           +--rw central-keystore-\
                                                              reference?
          |  |  |  |           |                   ks:central-\
                                                      asymmetric-key-ref
          |  |  |  |           +--:(tls13-epsk)
          |  |  |  |                    {tlsc:client-ident-tls13-epsk}?
          |  |  |  |              +--rw tls13-epsk
          |  |  |  |                 +--rw (inline-or-keystore)
          |  |  |  |                 |  +--:(inline)
          |  |  |  |                 |  |        {inline-definitions-\
                                                             supported}?
          |  |  |  |                 |  |  +--rw inline-definition
          |  |  |  |                 |  |     +--rw key-format?
          |  |  |  |                 |  |     |       identityref
          |  |  |  |                 |  |     +--rw (key-type)
          |  |  |  |                 |  |        +--:(cleartext-\
                                                          symmetric-key)
          |  |  |  |                 |  |        |  +--rw cleartext-\
                                                          symmetric-key?
          |  |  |  |                 |  |        |          binary
          |  |  |  |                 |  |        |          {cleartext-\
                                                        symmetric-keys}?
          |  |  |  |                 |  |        +--:(hidden-symmetric-\
                                                                    key)
          |  |  |  |                 |  |        |        {hidden-\
                                                        symmetric-keys}?
          |  |  |  |                 |  |        |  +--rw hidden-\
                                                          symmetric-key?
          |  |  |  |                 |  |        |          empty
          |  |  |  |                 |  |        +--:(encrypted-\
                                                          symmetric-key)
          |  |  |  |                 |  |                 {encrypted-\
                                                        symmetric-keys}?
          |  |  |  |                 |  |           +--rw encrypted-\
                                                           symmetric-key
          |  |  |  |                 |  |              +--rw encrypted-\
                                                                      by
          |  |  |  |                 |  |              +--rw encrypted-\
                                                            value-format
          |  |  |  |                 |  |              |       \
                                                             identityref
          |  |  |  |                 |  |              +--rw encrypted-\
                                                                   value
          |  |  |  |                 |  |                      binary
          |  |  |  |                 |  +--:(central-keystore)
          |  |  |  |                 |           {central-keystore-\
                                              supported,symmetric-keys}?
          |  |  |  |                 |     +--rw central-keystore-\
                                                              reference?
          |  |  |  |                 |             ks:central-symmetric\
                                                                -key-ref
          |  |  |  |                 +--rw external-identity
          |  |  |  |                 |       string
          |  |  |  |                 +--rw hash?
          |  |  |  |                 |       tlscmn:epsk-supported-hash
          |  |  |  |                 +--rw context?
          |  |  |  |                 |       string
          |  |  |  |                 +--rw target-protocol?
          |  |  |  |                 |       uint16
          |  |  |  |                 +--rw target-kdf?
          |  |  |  |                         uint16
          |  |  |  +--rw server-authentication
          |  |  |  |  +--rw (ref-or-explicit)?
          |  |  |  |     +--:(ref)
          |  |  |  |     |  +--rw credentials-reference?
          |  |  |  |     |          sys-tcs-plus:server-credentials-ref
          |  |  |  |     +--:(explicit)
          |  |  |  |        +--rw ca-certs!
          |  |  |  |        |  +--rw (inline-or-truststore)
          |  |  |  |        |     +--:(inline)
          |  |  |  |        |     |        {inline-definitions-\
                                                             supported}?
          |  |  |  |        |     |  +--rw inline-definition
          |  |  |  |        |     |     +--rw certificate* [name]
          |  |  |  |        |     |        +--rw name
          |  |  |  |        |     |        |       string
          |  |  |  |        |     |        +--rw cert-data
          |  |  |  |        |     |        |       trust-anchor-cert-cms
          |  |  |  |        |     |        +---n certificate-expiration
          |  |  |  |        |     |                {certificate-\
                                               expiration-notification}?
          |  |  |  |        |     |           +-- expiration-date
          |  |  |  |        |     |                   yang:date-and-time
          |  |  |  |        |     +--:(central-truststore)
          |  |  |  |        |              {central-truststore-\
                                                supported,certificates}?
          |  |  |  |        |        +--rw central-truststore-reference?
          |  |  |  |        |                ts:central-certificate-bag\
                                                                    -ref
          |  |  |  |        +--rw ee-certs!
          |  |  |  |        |  +--rw (inline-or-truststore)
          |  |  |  |        |     +--:(inline)
          |  |  |  |        |     |        {inline-definitions-\
                                                             supported}?
          |  |  |  |        |     |  +--rw inline-definition
          |  |  |  |        |     |     +--rw certificate* [name]
          |  |  |  |        |     |        +--rw name
          |  |  |  |        |     |        |       string
          |  |  |  |        |     |        +--rw cert-data
          |  |  |  |        |     |        |       trust-anchor-cert-cms
          |  |  |  |        |     |        +---n certificate-expiration
          |  |  |  |        |     |                {certificate-\
                                               expiration-notification}?
          |  |  |  |        |     |           +-- expiration-date
          |  |  |  |        |     |                   yang:date-and-time
          |  |  |  |        |     +--:(central-truststore)
          |  |  |  |        |              {central-truststore-\
                                                supported,certificates}?
          |  |  |  |        |        +--rw central-truststore-reference?
          |  |  |  |        |                ts:central-certificate-bag\
                                                                    -ref
          |  |  |  |        +--rw raw-public-keys!
          |  |  |  |        |       {tlsc:server-auth-raw-public-key}?
          |  |  |  |        |  +--rw (inline-or-truststore)
          |  |  |  |        |     +--:(inline)
          |  |  |  |        |     |        {inline-definitions-\
                                                             supported}?
          |  |  |  |        |     |  +--rw inline-definition
          |  |  |  |        |     |     +--rw public-key* [name]
          |  |  |  |        |     |        +--rw name
          |  |  |  |        |     |        |       string
          |  |  |  |        |     |        +--rw public-key-format
          |  |  |  |        |     |        |       identityref
          |  |  |  |        |     |        +--rw public-key
          |  |  |  |        |     |                binary
          |  |  |  |        |     +--:(central-truststore)
          |  |  |  |        |              {central-truststore-\
                                                 supported,public-keys}?
          |  |  |  |        |        +--rw central-truststore-reference?
          |  |  |  |        |                ts:central-public-key-bag-\
                                                                     ref
          |  |  |  |        +--rw tls13-epsks?             empty
          |  |  |  |                {tlsc:server-auth-tls13-epsk}?
          |  |  |  +--rw hello-params {tlscmn:hello-params}?
          |  |  |     +--rw tls-versions
          |  |  |     |  +--rw min?   identityref
          |  |  |     |  +--rw max?   identityref
          |  |  |     +--rw cipher-suites
          |  |  |        +--rw cipher-suite*
          |  |  |                tlscsa:tls-cipher-suite-algorithm
          |  |  +--:(obfuscation)
          |  |  |  +--rw shared-secret?                         string
          |  |  +--:(secure-tacacs:tls)
          |  |     +--rw secure-tacacs:client-identity!
          |  |     |  +--rw (secure-tacacs:ref-or-explicit)?
          |  |     |     +--:(secure-tacacs:ref)
          |  |     |     |  +--rw secure-tacacs:credentials-reference?
          |  |     |     |          secure-tacacs:client-credentials-ref
          |  |     |     +--:(secure-tacacs:explicit)
          |  |     |        +--rw (secure-tacacs:auth-type)?
          |  |     |           +--:(secure-tacacs:certificate)
          |  |     |           |  +--rw secure-tacacs:certificate
          |  |     |           |     +--rw (secure-tacacs:inline-or-\
                                                               keystore)
          |  |     |           |        +--:(secure-tacacs:inline)
          |  |     |           |        |        {inline-definitions-\
                                                             supported}?
          |  |     |           |        |  +--rw secure-tacacs:inline-\
                                                              definition
          |  |     |           |        |     +--rw secure-tacacs:\
                                                      public-key-format?
          |  |     |           |        |     |       identityref
          |  |     |           |        |     +--rw secure-tacacs:\
                                                             public-key?
          |  |     |           |        |     |       binary
          |  |     |           |        |     +--rw secure-tacacs:\
                                                     private-key-format?
          |  |     |           |        |     |       identityref
          |  |     |           |        |     +--rw (secure-tacacs:\
                                                       private-key-type)
          |  |     |           |        |     |  +--:(secure-tacacs:\
                                                  cleartext-private-key)
          |  |     |           |        |     |  |        {cleartext-\
                                                          private-keys}?
          |  |     |           |        |     |  |  +--rw secure-tacacs\
                                                 :cleartext-private-key?
          |  |     |           |        |     |  |          binary
          |  |     |           |        |     |  +--:(secure-tacacs:\
                                                     hidden-private-key)
          |  |     |           |        |     |  |        {hidden-\
                                                          private-keys}?
          |  |     |           |        |     |  |  +--rw secure-tacacs\
                                                    :hidden-private-key?
          |  |     |           |        |     |  |          empty
          |  |     |           |        |     |  +--:(secure-tacacs:\
                                                  encrypted-private-key)
          |  |     |           |        |     |           {encrypted-\
                                                          private-keys}?
          |  |     |           |        |     |     +--rw secure-tacacs\
                                                  :encrypted-private-key
          |  |     |           |        |     |        +--rw secure-\
                                                     tacacs:encrypted-by
          |  |     |           |        |     |        +--rw secure-\
                                           tacacs:encrypted-value-format
          |  |     |           |        |     |        |       \
                                                             identityref
          |  |     |           |        |     |        +--rw secure-\
                                                  tacacs:encrypted-value
          |  |     |           |        |     |                binary
          |  |     |           |        |     +--rw secure-tacacs:cert-\
                                                                   data?
          |  |     |           |        |     |       end-entity-cert-\
                                                                     cms
          |  |     |           |        |     +---n secure-tacacs:\
                                                  certificate-expiration
          |  |     |           |        |     |       {certificate-\
                                               expiration-notification}?
          |  |     |           |        |     |  +-- secure-tacacs:\
                                                         expiration-date
          |  |     |           |        |     |          yang:date-and-\
                                                                    time
          |  |     |           |        |     +---x secure-tacacs:\
                                                            generate-csr
          |  |     |           |        |             {csr-generation}?
          |  |     |           |        |        +---w secure-tacacs:\
                                                                   input
          |  |     |           |        |        |  +---w secure-tacacs\
                                                             :csr-format
          |  |     |           |        |        |  |       identityref
          |  |     |           |        |        |  +---w secure-tacacs\
                                                               :csr-info
          |  |     |           |        |        |          csr-info
          |  |     |           |        |        +--ro secure-tacacs:\
                                                                  output
          |  |     |           |        |           +--ro (secure-\
                                                        tacacs:csr-type)
          |  |     |           |        |              +--:(secure-\
                                                         tacacs:p10-csr)
          |  |     |           |        |                 +--ro secure-\
                                                         tacacs:p10-csr?
          |  |     |           |        |                         p10-\
                                                                     csr
          |  |     |           |        +--:(secure-tacacs:central-\
                                                               keystore)
          |  |     |           |                 {central-keystore-\
                                             supported,asymmetric-keys}?
          |  |     |           |           +--rw secure-tacacs:central-\
                                                      keystore-reference
          |  |     |           |              +--rw secure-tacacs:\
                                                         asymmetric-key?
          |  |     |           |              |       ks:central-\
                                                      asymmetric-key-ref
          |  |     |           |              |       {central-keystore\
                                            -supported,asymmetric-keys}?
          |  |     |           |              +--rw secure-tacacs:\
                                                            certificate?
          |  |     |           |                      leafref
          |  |     |           +--:(secure-tacacs:raw-public-key)
          |  |     |           |        {tlsc:client-ident-raw-public-\
                                                                   key}?
          |  |     |           |  +--rw secure-tacacs:raw-private-key
          |  |     |           |     +--rw (secure-tacacs:inline-or-\
                                                               keystore)
          |  |     |           |        +--:(secure-tacacs:inline)
          |  |     |           |        |        {inline-definitions-\
                                                             supported}?
          |  |     |           |        |  +--rw secure-tacacs:inline-\
                                                              definition
          |  |     |           |        |     +--rw secure-tacacs:\
                                                      public-key-format?
          |  |     |           |        |     |       identityref
          |  |     |           |        |     +--rw secure-tacacs:\
                                                             public-key?
          |  |     |           |        |     |       binary
          |  |     |           |        |     +--rw secure-tacacs:\
                                                     private-key-format?
          |  |     |           |        |     |       identityref
          |  |     |           |        |     +--rw (secure-tacacs:\
                                                       private-key-type)
          |  |     |           |        |        +--:(secure-tacacs:\
                                                  cleartext-private-key)
          |  |     |           |        |        |        {cleartext-\
                                                          private-keys}?
          |  |     |           |        |        |  +--rw secure-tacacs\
                                                 :cleartext-private-key?
          |  |     |           |        |        |          binary
          |  |     |           |        |        +--:(secure-tacacs:\
                                                     hidden-private-key)
          |  |     |           |        |        |        {hidden-\
                                                          private-keys}?
          |  |     |           |        |        |  +--rw secure-tacacs\
                                                    :hidden-private-key?
          |  |     |           |        |        |          empty
          |  |     |           |        |        +--:(secure-tacacs:\
                                                  encrypted-private-key)
          |  |     |           |        |                 {encrypted-\
                                                          private-keys}?
          |  |     |           |        |           +--rw secure-tacacs\
                                                  :encrypted-private-key
          |  |     |           |        |              +--rw secure-\
                                                     tacacs:encrypted-by
          |  |     |           |        |              +--rw secure-\
                                           tacacs:encrypted-value-format
          |  |     |           |        |              |       \
                                                             identityref
          |  |     |           |        |              +--rw secure-\
                                                  tacacs:encrypted-value
          |  |     |           |        |                      binary
          |  |     |           |        +--:(secure-tacacs:central-\
                                                               keystore)
          |  |     |           |                 {central-keystore-\
                                             supported,asymmetric-keys}?
          |  |     |           |           +--rw secure-tacacs:central-\
                                                     keystore-reference?
          |  |     |           |                   ks:central-\
                                                      asymmetric-key-ref
          |  |     |           +--:(secure-tacacs:tls13-epsk)
          |  |     |                    {tlsc:client-ident-tls13-epsk}?
          |  |     |              +--rw secure-tacacs:tls13-epsk
          |  |     |                 +--rw (secure-tacacs:inline-or-\
                                                               keystore)
          |  |     |                 |  +--:(secure-tacacs:inline)
          |  |     |                 |  |        {inline-definitions-\
                                                             supported}?
          |  |     |                 |  |  +--rw secure-tacacs:inline-\
                                                              definition
          |  |     |                 |  |     +--rw secure-tacacs:key-\
                                                                 format?
          |  |     |                 |  |     |       identityref
          |  |     |                 |  |     +--rw (secure-tacacs:key-\
                                                                   type)
          |  |     |                 |  |        +--:(secure-tacacs:\
                                                cleartext-symmetric-key)
          |  |     |                 |  |        |  +--rw secure-tacacs\
                                               :cleartext-symmetric-key?
          |  |     |                 |  |        |          binary
          |  |     |                 |  |        |          {cleartext-\
                                                        symmetric-keys}?
          |  |     |                 |  |        +--:(secure-tacacs:\
                                                   hidden-symmetric-key)
          |  |     |                 |  |        |        {hidden-\
                                                        symmetric-keys}?
          |  |     |                 |  |        |  +--rw secure-tacacs\
                                                  :hidden-symmetric-key?
          |  |     |                 |  |        |          empty
          |  |     |                 |  |        +--:(secure-tacacs:\
                                                encrypted-symmetric-key)
          |  |     |                 |  |                 {encrypted-\
                                                        symmetric-keys}?
          |  |     |                 |  |           +--rw secure-tacacs\
                                                :encrypted-symmetric-key
          |  |     |                 |  |              +--rw secure-\
                                                     tacacs:encrypted-by
          |  |     |                 |  |              +--rw secure-\
                                           tacacs:encrypted-value-format
          |  |     |                 |  |              |       \
                                                             identityref
          |  |     |                 |  |              +--rw secure-\
                                                  tacacs:encrypted-value
          |  |     |                 |  |                      binary
          |  |     |                 |  +--:(secure-tacacs:central-\
                                                               keystore)
          |  |     |                 |           {central-keystore-\
                                              supported,symmetric-keys}?
          |  |     |                 |     +--rw secure-tacacs:central-\
                                                     keystore-reference?
          |  |     |                 |             ks:central-symmetric\
                                                                -key-ref
          |  |     |                 +--rw secure-tacacs:external-\
                                                                identity
          |  |     |                 |       string
          |  |     |                 +--rw secure-tacacs:hash?
          |  |     |                 |       tlscmn:epsk-supported-hash
          |  |     |                 +--rw secure-tacacs:context?
          |  |     |                 |       string
          |  |     |                 +--rw secure-tacacs:target-\
                                                               protocol?
          |  |     |                 |       uint16
          |  |     |                 +--rw secure-tacacs:target-kdf?
          |  |     |                         uint16
          |  |     +--rw secure-tacacs:server-authentication
          |  |     |  +--rw (secure-tacacs:ref-or-explicit)?
          |  |     |     +--:(secure-tacacs:ref)
          |  |     |     |  +--rw secure-tacacs:credentials-reference?
          |  |     |     |          secure-tacacs:server-credentials-ref
          |  |     |     +--:(secure-tacacs:explicit)
          |  |     |        +--rw secure-tacacs:ca-certs!
          |  |     |        |  +--rw (secure-tacacs:inline-or-\
                                                             truststore)
          |  |     |        |     +--:(secure-tacacs:inline)
          |  |     |        |     |        {inline-definitions-\
                                                             supported}?
          |  |     |        |     |  +--rw secure-tacacs:inline-\
                                                              definition
          |  |     |        |     |     +--rw secure-tacacs:certificate*
          |  |     |        |     |             [name]
          |  |     |        |     |        +--rw secure-tacacs:name
          |  |     |        |     |        |       string
          |  |     |        |     |        +--rw secure-tacacs:cert-data
          |  |     |        |     |        |       trust-anchor-cert-cms
          |  |     |        |     |        +---n secure-tacacs:\
                                                  certificate-expiration
          |  |     |        |     |                {certificate-\
                                               expiration-notification}?
          |  |     |        |     |           +-- secure-tacacs:\
                                                         expiration-date
          |  |     |        |     |                   yang:date-and-time
          |  |     |        |     +--:(secure-tacacs:central-truststore)
          |  |     |        |              {central-truststore-\
                                                supported,certificates}?
          |  |     |        |        +--rw secure-tacacs:central-\
                                                   truststore-reference?
          |  |     |        |                ts:central-certificate-bag\
                                                                    -ref
          |  |     |        +--rw secure-tacacs:ee-certs!
          |  |     |        |  +--rw (secure-tacacs:inline-or-\
                                                             truststore)
          |  |     |        |     +--:(secure-tacacs:inline)
          |  |     |        |     |        {inline-definitions-\
                                                             supported}?
          |  |     |        |     |  +--rw secure-tacacs:inline-\
                                                              definition
          |  |     |        |     |     +--rw secure-tacacs:certificate*
          |  |     |        |     |             [name]
          |  |     |        |     |        +--rw secure-tacacs:name
          |  |     |        |     |        |       string
          |  |     |        |     |        +--rw secure-tacacs:cert-data
          |  |     |        |     |        |       trust-anchor-cert-cms
          |  |     |        |     |        +---n secure-tacacs:\
                                                  certificate-expiration
          |  |     |        |     |                {certificate-\
                                               expiration-notification}?
          |  |     |        |     |           +-- secure-tacacs:\
                                                         expiration-date
          |  |     |        |     |                   yang:date-and-time
          |  |     |        |     +--:(secure-tacacs:central-truststore)
          |  |     |        |              {central-truststore-\
                                                supported,certificates}?
          |  |     |        |        +--rw secure-tacacs:central-\
                                                   truststore-reference?
          |  |     |        |                ts:central-certificate-bag\
                                                                    -ref
          |  |     |        +--rw secure-tacacs:raw-public-keys!
          |  |     |        |       {tlsc:server-auth-raw-public-key}?
          |  |     |        |  +--rw (secure-tacacs:inline-or-\
                                                             truststore)
          |  |     |        |     +--:(secure-tacacs:inline)
          |  |     |        |     |        {inline-definitions-\
                                                             supported}?
          |  |     |        |     |  +--rw secure-tacacs:inline-\
                                                              definition
          |  |     |        |     |     +--rw secure-tacacs:public-key*
          |  |     |        |     |             [name]
          |  |     |        |     |        +--rw secure-tacacs:name
          |  |     |        |     |        |       string
          |  |     |        |     |        +--rw secure-tacacs:public-\
                                                              key-format
          |  |     |        |     |        |       identityref
          |  |     |        |     |        +--rw secure-tacacs:public-\
                                                                     key
          |  |     |        |     |                binary
          |  |     |        |     +--:(secure-tacacs:central-truststore)
          |  |     |        |              {central-truststore-\
                                                 supported,public-keys}?
          |  |     |        |        +--rw secure-tacacs:central-\
                                                   truststore-reference?
          |  |     |        |                ts:central-public-key-bag-\
                                                                     ref
          |  |     |        +--rw secure-tacacs:tls13-epsks?
          |  |     |                empty {tlsc:server-auth-tls13-epsk}?
          |  |     +--rw secure-tacacs:hello-params
          |  |             {tlscmn:hello-params}?
          |  |        +--rw secure-tacacs:tls-versions
          |  |        |  +--rw secure-tacacs:min?   identityref
          |  |        |  +--rw secure-tacacs:max?   identityref
          |  |        +--rw secure-tacacs:cipher-suites
          |  |           +--rw secure-tacacs:cipher-suite*
          |  |                   tlscsa:tls-cipher-suite-algorithm
          |  +--rw (source-type)?
          |  |  +--:(source-ip)
          |  |  |  +--rw source-ip?
          |  |  |          inet:ip-address
          |  |  +--:(source-interface)
          |  |     +--rw source-interface?
          |  |             if:interface-ref
          |  +--rw vrf-instance?
          |  |       -> /ni:network-instances/network-instance/name
          |  +--rw single-connection?                           boolean
          |  +--rw timeout?                                     uint16
          |  +--ro statistics
          |  |  +--ro connection-opens?      yang:counter64
          |  |  +--ro connection-closes?     yang:counter64
          |  |  +--ro connection-aborts?     yang:counter64
          |  |  +--ro connection-failures?   yang:counter64
          |  |  +--ro connection-timeouts?   yang:counter64
          |  |  +--ro messages-sent?         yang:counter64
          |  |  +--ro messages-received?     yang:counter64
          |  |  +--ro errors-received?       yang:counter64
          |  |  +--ro sessions?              yang:counter64
          |  +--rw secure-tacacs:domain-name?
          |          inet:domain-name
          +--rw secure-tacacs:client-credentials* [id]
          |  +--rw secure-tacacs:id                       string
          |  +--rw (secure-tacacs:auth-type)?
          |     +--:(secure-tacacs:certificate)
          |     |  +--rw secure-tacacs:certificate
          |     |     +--rw (secure-tacacs:inline-or-keystore)
          |     |        +--:(secure-tacacs:inline)
          |     |        |        {inline-definitions-supported}?
          |     |        |  +--rw secure-tacacs:inline-definition
          |     |        |     +--rw secure-tacacs:public-key-format?
          |     |        |     |       identityref
          |     |        |     +--rw secure-tacacs:public-key?
          |     |        |     |       binary
          |     |        |     +--rw secure-tacacs:private-key-format?
          |     |        |     |       identityref
          |     |        |     +--rw (secure-tacacs:private-key-type)
          |     |        |     |  +--:(secure-tacacs:cleartext-private-\
                                                                    key)
          |     |        |     |  |        {cleartext-private-keys}?
          |     |        |     |  |  +--rw secure-tacacs:cleartext-\
                                                            private-key?
          |     |        |     |  |          binary
          |     |        |     |  +--:(secure-tacacs:hidden-private-key)
          |     |        |     |  |        {hidden-private-keys}?
          |     |        |     |  |  +--rw secure-tacacs:hidden-private\
                                                                   -key?
          |     |        |     |  |          empty
          |     |        |     |  +--:(secure-tacacs:encrypted-private-\
                                                                    key)
          |     |        |     |           {encrypted-private-keys}?
          |     |        |     |     +--rw secure-tacacs:encrypted-\
                                                             private-key
          |     |        |     |        +--rw secure-tacacs:encrypted-by
          |     |        |     |        +--rw secure-tacacs:encrypted-\
                                                            value-format
          |     |        |     |        |       identityref
          |     |        |     |        +--rw secure-tacacs:encrypted-\
                                                                   value
          |     |        |     |                binary
          |     |        |     +--rw secure-tacacs:cert-data?
          |     |        |     |       end-entity-cert-cms
          |     |        |     +---n secure-tacacs:certificate-\
                                                              expiration
          |     |        |     |       {certificate-expiration-\
                                                          notification}?
          |     |        |     |  +-- secure-tacacs:expiration-date
          |     |        |     |          yang:date-and-time
          |     |        |     +---x secure-tacacs:generate-csr
          |     |        |             {csr-generation}?
          |     |        |        +---w secure-tacacs:input
          |     |        |        |  +---w secure-tacacs:csr-format
          |     |        |        |  |       identityref
          |     |        |        |  +---w secure-tacacs:csr-info
          |     |        |        |          csr-info
          |     |        |        +--ro secure-tacacs:output
          |     |        |           +--ro (secure-tacacs:csr-type)
          |     |        |              +--:(secure-tacacs:p10-csr)
          |     |        |                 +--ro secure-tacacs:p10-csr?
          |     |        |                         p10-csr
          |     |        +--:(secure-tacacs:central-keystore)
          |     |                 {central-keystore-supported,\
                                                       asymmetric-keys}?
          |     |           +--rw secure-tacacs:central-keystore-\
                                                               reference
          |     |              +--rw secure-tacacs:asymmetric-key?
          |     |              |       ks:central-asymmetric-key-ref
          |     |              |       {central-keystore-supported,\
                                                       asymmetric-keys}?
          |     |              +--rw secure-tacacs:certificate?
          |     |                      leafref
          |     +--:(secure-tacacs:raw-public-key)
          |     |        {tlsc:client-ident-raw-public-key}?
          |     |  +--rw secure-tacacs:raw-private-key
          |     |     +--rw (secure-tacacs:inline-or-keystore)
          |     |        +--:(secure-tacacs:inline)
          |     |        |        {inline-definitions-supported}?
          |     |        |  +--rw secure-tacacs:inline-definition
          |     |        |     +--rw secure-tacacs:public-key-format?
          |     |        |     |       identityref
          |     |        |     +--rw secure-tacacs:public-key?
          |     |        |     |       binary
          |     |        |     +--rw secure-tacacs:private-key-format?
          |     |        |     |       identityref
          |     |        |     +--rw (secure-tacacs:private-key-type)
          |     |        |        +--:(secure-tacacs:cleartext-private-\
                                                                    key)
          |     |        |        |        {cleartext-private-keys}?
          |     |        |        |  +--rw secure-tacacs:cleartext-\
                                                            private-key?
          |     |        |        |          binary
          |     |        |        +--:(secure-tacacs:hidden-private-key)
          |     |        |        |        {hidden-private-keys}?
          |     |        |        |  +--rw secure-tacacs:hidden-private\
                                                                   -key?
          |     |        |        |          empty
          |     |        |        +--:(secure-tacacs:encrypted-private-\
                                                                    key)
          |     |        |                 {encrypted-private-keys}?
          |     |        |           +--rw secure-tacacs:encrypted-\
                                                             private-key
          |     |        |              +--rw secure-tacacs:encrypted-by
          |     |        |              +--rw secure-tacacs:encrypted-\
                                                            value-format
          |     |        |              |       identityref
          |     |        |              +--rw secure-tacacs:encrypted-\
                                                                   value
          |     |        |                      binary
          |     |        +--:(secure-tacacs:central-keystore)
          |     |                 {central-keystore-supported,\
                                                       asymmetric-keys}?
          |     |           +--rw secure-tacacs:central-keystore-\
                                                              reference?
          |     |                   ks:central-asymmetric-key-ref
          |     +--:(secure-tacacs:tls13-epsk)
          |              {tlsc:client-ident-tls13-epsk}?
          |        +--rw secure-tacacs:tls13-epsk
          |           +--rw (secure-tacacs:inline-or-keystore)
          |           |  +--:(secure-tacacs:inline)
          |           |  |        {inline-definitions-supported}?
          |           |  |  +--rw secure-tacacs:inline-definition
          |           |  |     +--rw secure-tacacs:key-format?
          |           |  |     |       identityref
          |           |  |     +--rw (secure-tacacs:key-type)
          |           |  |        +--:(secure-tacacs:cleartext-\
                                                          symmetric-key)
          |           |  |        |  +--rw secure-tacacs:cleartext-\
                                                          symmetric-key?
          |           |  |        |          binary
          |           |  |        |          {cleartext-symmetric-keys}?
          |           |  |        +--:(secure-tacacs:hidden-symmetric-\
                                                                    key)
          |           |  |        |        {hidden-symmetric-keys}?
          |           |  |        |  +--rw secure-tacacs:hidden-\
                                                          symmetric-key?
          |           |  |        |          empty
          |           |  |        +--:(secure-tacacs:encrypted-\
                                                          symmetric-key)
          |           |  |                 {encrypted-symmetric-keys}?
          |           |  |           +--rw secure-tacacs:encrypted-\
                                                           symmetric-key
          |           |  |              +--rw secure-tacacs:encrypted-by
          |           |  |              +--rw secure-tacacs:encrypted-\
                                                            value-format
          |           |  |              |       identityref
          |           |  |              +--rw secure-tacacs:encrypted-\
                                                                   value
          |           |  |                      binary
          |           |  +--:(secure-tacacs:central-keystore)
          |           |           {central-keystore-supported,symmetric\
                                                                 -keys}?
          |           |     +--rw secure-tacacs:central-keystore-\
                                                              reference?
          |           |             ks:central-symmetric-key-ref
          |           +--rw secure-tacacs:external-identity
          |           |       string
          |           +--rw secure-tacacs:hash?
          |           |       tlscmn:epsk-supported-hash
          |           +--rw secure-tacacs:context?
          |           |       string
          |           +--rw secure-tacacs:target-protocol?
          |           |       uint16
          |           +--rw secure-tacacs:target-kdf?
          |                   uint16
          +--rw secure-tacacs:server-credentials* [id]
             +--rw secure-tacacs:id                 string
             +--rw secure-tacacs:ca-certs!
             |  +--rw (secure-tacacs:inline-or-truststore)
             |     +--:(secure-tacacs:inline)
             |     |        {inline-definitions-supported}?
             |     |  +--rw secure-tacacs:inline-definition
             |     |     +--rw secure-tacacs:certificate* [name]
             |     |        +--rw secure-tacacs:name
             |     |        |       string
             |     |        +--rw secure-tacacs:cert-data
             |     |        |       trust-anchor-cert-cms
             |     |        +---n secure-tacacs:certificate-expiration
             |     |                {certificate-expiration-\
                                                          notification}?
             |     |           +-- secure-tacacs:expiration-date
             |     |                   yang:date-and-time
             |     +--:(secure-tacacs:central-truststore)
             |              {central-truststore-supported,certificates}?
             |        +--rw secure-tacacs:central-truststore-reference?
             |                ts:central-certificate-bag-ref
             +--rw secure-tacacs:ee-certs!
             |  +--rw (secure-tacacs:inline-or-truststore)
             |     +--:(secure-tacacs:inline)
             |     |        {inline-definitions-supported}?
             |     |  +--rw secure-tacacs:inline-definition
             |     |     +--rw secure-tacacs:certificate* [name]
             |     |        +--rw secure-tacacs:name
             |     |        |       string
             |     |        +--rw secure-tacacs:cert-data
             |     |        |       trust-anchor-cert-cms
             |     |        +---n secure-tacacs:certificate-expiration
             |     |                {certificate-expiration-\
                                                          notification}?
             |     |           +-- secure-tacacs:expiration-date
             |     |                   yang:date-and-time
             |     +--:(secure-tacacs:central-truststore)
             |              {central-truststore-supported,certificates}?
             |        +--rw secure-tacacs:central-truststore-reference?
             |                ts:central-certificate-bag-ref
             +--rw secure-tacacs:raw-public-keys!
             |       {tlsc:server-auth-raw-public-key}?
             |  +--rw (secure-tacacs:inline-or-truststore)
             |     +--:(secure-tacacs:inline)
             |     |        {inline-definitions-supported}?
             |     |  +--rw secure-tacacs:inline-definition
             |     |     +--rw secure-tacacs:public-key* [name]
             |     |        +--rw secure-tacacs:name
             |     |        |       string
             |     |        +--rw secure-tacacs:public-key-format
             |     |        |       identityref
             |     |        +--rw secure-tacacs:public-key
             |     |                binary
             |     +--:(secure-tacacs:central-truststore)
             |              {central-truststore-supported,public-keys}?
             |        +--rw secure-tacacs:central-truststore-reference?
             |                ts:central-public-key-bag-ref
             +--rw secure-tacacs:tls13-epsks?       empty
                     {tlsc:server-auth-tls13-epsk}?

Acknowledgments

   The document leverages data structures defined in [RFC9645].

   Thanks to Bo Wu, Joe Clarke, and Tom Petch for the review and
   comments.

Author's Address

   Mohamed Boucadair (editor)
   Orange
   Email: mohamed.boucadair@orange.com
