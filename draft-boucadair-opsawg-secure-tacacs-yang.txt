



Operations and Management Area Working Group           M. Boucadair, Ed.
Internet-Draft                                                    Orange
Intended status: Informational                               23 May 2024
Expires: 24 November 2024


 A YANG Model for Terminal Access Controller Access-Control System Plus
                         (TACACS+) over TLS 1.3
            draft-boucadair-opsawg-secure-tacacs-yang-latest

Abstract

   This document defines a YANG module for Terminal Access Controller
   Access-Control System Plus (TACACS+) over TLS 1.3.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://boucadair.github.io/secure-tacacs-yang/draft-boucadair-
   opsawg-secure-tacacs-yang.html.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-boucadair-
   opsawg-secure-tacacs-yang/.

   Discussion of this document takes place on the Operations and
   Management Area Working Group Working Group mailing list
   (mailto:opsawg@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/opsawg/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/opsawg/.

   Source for this draft and an issue tracker can be found at
   https://github.com/boucadair/secure-tacacs-yang.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 24 November 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Module Tree Structure
   4.  YANG Module
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   This document defines a YANG module for managing Terminal Access
   Controller Access-Control System Plus (TACACS+) over TLS 1.3
   [I-D.ietf-opsawg-tacacs-tls13].  The module is designed as an
   augmentation to the "ietf-system-tacacs-plus" module specified in
   [RFC9105].

   The module uses the TLS grouping defined in
   [I-D.ietf-netconf-tls-client-server].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The meanings of the symbols in the YANG tree diagrams are defined in
   [RFC8340].

   The document uses the terms defined in Section 2 of
   [I-D.ietf-opsawg-tacacs-tls13] and Section 3 of [RFC8907].

3.  Module Tree Structure

   The full tree structure is shown below:

   =============== NOTE: '\' line wrapping per RFC 8792 ================

   module: ietf-system-secure-tacacs
     augment /sys:system/sys-tcs-plus:tacacs-plus/sys-tcs-plus:server
               /sys-tcs-plus:security:
       +--:(tls)
          +--rw client-identity!
             +--rw (auth-type)
                +--:(certificate) {tlsc:client-ident-x509-cert}?
                |  +--rw certificate
                |     +--rw (inline-or-keystore)
                |        +--:(inline) {inline-definitions-supported}?
                |        |  +--rw inline-definition
                |        |     +--rw public-key-format
                |        |     |       identityref
                |        |     +--rw public-key
                |        |     |       binary
                |        |     +--rw private-key-format?
                |        |     |       identityref
                |        |     +--rw (private-key-type)
                |        |     |  +--:(cleartext-private-key)
                |        |     |  |        {cleartext-private-keys}?
                |        |     |  |  +--rw cleartext-private-key?
                |        |     |  |          binary
                |        |     |  +--:(hidden-private-key)
                |        |     |  |        {hidden-private-keys}?
                |        |     |  |  +--rw hidden-private-key?      \
                                                                   empty
                |        |     |  +--:(encrypted-private-key)
                |        |     |           {encrypted-private-keys}?
                |        |     |     +--rw encrypted-private-key
                |        |     |        +--rw encrypted-by
                |        |     |        +--rw encrypted-value-format
                |        |     |        |       identityref
                |        |     |        +--rw encrypted-value
                |        |     |                binary
                |        |     +--rw cert-data?
                |        |     |       end-entity-cert-cms
                |        |     +---n certificate-expiration
                |        |     |       {certificate-expiration-\
                                                          notification}?
                |        |     |  +-- expiration-date
                |        |     |          yang:date-and-time
                |        |     +---x generate-csr {csr-generation}?
                |        |        +---w input
                |        |        |  +---w csr-format    identityref
                |        |        |  +---w csr-info      csr-info
                |        |        +--ro output
                |        |           +--ro (csr-type)
                |        |              +--:(p10-csr)
                |        |                 +--ro p10-csr?   p10-csr
                |        +--:(keystore)
                |                 {central-keystore-supported,\
                                                       asymmetric-keys}?
                |           +--rw keystore-reference
                |              +--rw asymmetric-key?
                |              |       ks:asymmetric-key-ref
                |              |       {central-keystore-supported,\
                                                       asymmetric-keys}?
                |              +--rw certificate?      leafref
                +--:(raw-public-key) {tlsc:client-ident-raw-public-key}?
                |  +--rw raw-private-key
                |     +--rw (inline-or-keystore)
                |        +--:(inline) {inline-definitions-supported}?
                |        |  +--rw inline-definition
                |        |     +--rw public-key-format
                |        |     |       identityref
                |        |     +--rw public-key
                |        |     |       binary
                |        |     +--rw private-key-format?
                |        |     |       identityref
                |        |     +--rw (private-key-type)
                |        |        +--:(cleartext-private-key)
                |        |        |        {cleartext-private-keys}?
                |        |        |  +--rw cleartext-private-key?
                |        |        |          binary
                |        |        +--:(hidden-private-key)
                |        |        |        {hidden-private-keys}?
                |        |        |  +--rw hidden-private-key?      \
                                                                   empty
                |        |        +--:(encrypted-private-key)
                |        |                 {encrypted-private-keys}?
                |        |           +--rw encrypted-private-key
                |        |              +--rw encrypted-by
                |        |              +--rw encrypted-value-format
                |        |              |       identityref
                |        |              +--rw encrypted-value
                |        |                      binary
                |        +--:(keystore)
                |                 {central-keystore-supported,\
                                                       asymmetric-keys}?
                |           +--rw keystore-reference?
                |                   ks:asymmetric-key-ref
                +--:(tls13-epsk) {tlsc:client-ident-tls13-epsk}?
                   +--rw tls13-epsk
                      +--rw (inline-or-keystore)
                      |  +--:(inline) {inline-definitions-supported}?
                      |  |  +--rw inline-definition
                      |  |     +--rw key-format?            identityref
                      |  |     +--rw (key-type)
                      |  |        +--:(cleartext-key)
                      |  |        |  +--rw cleartext-key?   binary
                      |  |        |          {cleartext-symmetric-keys}?
                      |  |        +--:(hidden-key)
                      |  |        |        {hidden-symmetric-keys}?
                      |  |        |  +--rw hidden-key?      empty
                      |  |        +--:(encrypted-key)
                      |  |                 {encrypted-symmetric-keys}?
                      |  |           +--rw encrypted-key
                      |  |              +--rw encrypted-by
                      |  |              +--rw encrypted-value-format
                      |  |              |       identityref
                      |  |              +--rw encrypted-value
                      |  |                      binary
                      |  +--:(keystore)
                      |           {central-keystore-supported,symmetric\
                                                                 -keys}?
                      |     +--rw keystore-reference?
                      |             ks:symmetric-key-ref
                      +--rw external-identity           string
                      +--rw hash?
                      |       tlscmn:epsk-supported-hash
                      +--rw context?                    string
                      +--rw target-kdf?                 uint16

4.  YANG Module

   This module uses references defined in XXXX.

   <CODE BEGINS> file "ietf-system-secure-tacacs@2024-05-23.yang"
   =============== NOTE: '\' line wrapping per RFC 8792 ================

     module ietf-system-secure-tacacs {
        yang-version 1.1;
        namespace
             "urn:ietf:params:xml:ns:yang:ietf-system-secure-tacacs";
        prefix secure-tacacs;

        import ietf-keystore {
          prefix ks;
          reference
            "RFC CCCC: A YANG Data Model for a Keystore";
        }
        import ietf-tls-client {
          prefix tlsc;
          reference
            "RFC FFFF: YANG Groupings for TLS Clients and TLS Servers";
        }
        import ietf-netconf-acm {
          prefix nacm;
          reference
            "RFC 8341: Network Configuration Access Control Model";
        }
        import ietf-crypto-types {
          prefix ct;
          reference
            "RFC AAAA: YANG Data Types and Groupings for Cryptography";
        }
        import ietf-tls-common {
          prefix tlscmn;
          reference
            "RFC FFFF: YANG Groupings for TLS Clients and TLS Servers";
        }
        import ietf-system {
          prefix sys;
          reference
            "RFC 7317: A YANG Data Model for System Management";
        }
        import ietf-system-tacacs-plus {
          prefix sys-tcs-plus;
          reference
            "RFC 9105: A YANG Data Model for Terminal Access Controller
                       Access-Control System Plus (TACACS+)";
        }

     organization
       "IETF OPSAWG (Operations and Management Area Working Group)";
     contact
       "WG Web:   <https://datatracker.ietf.org/wg/opsawg/>
        WG List:  <mailto:opsawg@ietf.org>

        Editor:   Mohamed Boucadair
                  <mailto:mohamed.boucadair@orange.com>";

        description
          "This module provides configuration of TACACS+ over TLS.

        Copyright (c) 2024 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Revised BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (https://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see the
        RFC itself for full legal notices.";

     revision 2024-05-23 {
       description
         "Initial revision.";
       reference
         "RFC XXXX: XXXX";
     }

   // to be further tweaked to align with the scope of tacacs+TLS spec
   // can't reuse the groupings in TLS as they are because TLS1.2 is \
                                                           not supported

        grouping tls-client-grouping {
          description
            "A reusable grouping for configuring a TLS client without
             any consideration for how an underlying TCP session is
             established.";

          container client-identity {
            nacm:default-deny-write;
            presence
              "Indicates that a TLS-level client identity has been
               configured.  This statement is present so the mandatory
               descendant do not imply that this node must be \
                                                           configured.";
            description
              "Identity credentials the TLS client may present when
               establishing a connection to a TLS server. When \
                                                             configured,
               and requested by the TLS server when establishing a
               TLS session, these credentials are passed in the
               Certificate message.";
            reference
              "RFC 8446: The Transport Layer Security (TLS)
                         Protocol Version 1.3, Section 4.4.2
               RFC CCCC: A YANG Data Model for a Keystore";
            choice auth-type {
              mandatory true;
              description
                "A choice amongst authentication types, of which one \
                                                                    must
                 be enabled and selected.";
              case certificate {
                if-feature "tlsc:client-ident-x509-cert";
                container certificate {
                  description
                    "Specifies the client identity using a certificate.\
                                                                      ";
                  uses
                    "ks:inline-or-keystore-end-entity-cert-with-key-"
                    + "grouping" {
                    refine "inline-or-keystore/inline/inline-definition\
                                                                     " {
                      must 'not(public-key-format) or derived-from-or-\
                                                                   self'
                         + '(public-key-format, "ct:subject-public-key-'
                         + 'info-format")';
                    }
                    refine "inline-or-keystore/keystore/"
                         + "keystore-reference/asymmetric-key" {
                      must 'not(deref(.)/../ks:public-key-format) or '
                         + 'derived-from-or-self(deref(.)/../ks:public-'
                         + 'key-format, "ct:subject-public-key-info-'
                         + 'format")';
                    }
                  }
                }
              }
              case raw-public-key {
                if-feature "tlsc:client-ident-raw-public-key";
                container raw-private-key {
                  description
                    "Specifies the client identity using a raw
                     private key.";
                  uses ks:inline-or-keystore-asymmetric-key-grouping {
                    refine "inline-or-keystore/inline/inline-definition\
                                                                     " {
                      must 'not(public-key-format) or derived-from-or-\
                                                                   self'
                         + '(public-key-format, "ct:subject-public-key-'
                         + 'info-format")';
                    }
                    refine "inline-or-keystore/keystore/"
                         + "keystore-reference" {
                      must 'not(deref(.)/../ks:public-key-format) or '
                         + 'derived-from-or-self(deref(.)/../ks:public-'
                         + 'key-format, "ct:subject-public-key-info-'
                         + 'format")';
                    }
                  }
                }
              }
              case tls13-epsk {
                if-feature "tlsc:client-ident-tls13-epsk";
                container tls13-epsk {
                  description
                    "An External Pre-Shared Key (EPSK) is established
                    or provisioned out-of-band, i.e., not from a TLS
                    connection.  An EPSK is a tuple of (Base Key,
                    External Identity, Hash).  When PSKs are provisioned
                    out of band, the PSK identity and the KDF hash \
                                                               algorithm
                    to be used with the PSK must also be provisioned.";
                  reference
                    "RFC 8446: The Transport Layer Security (TLS)
                               Protocol Version 1.3, Section 4.2.11
                     RFC 9257: Guidance for External Pre-Shared Key
                               (PSK) Usage in TLS, Section 6
                     RFC 9258: Importing External Pre-Shared Keys
                               (PSKs) for TLS 1.3, Section 5.1";
                  uses ks:inline-or-keystore-symmetric-key-grouping;
                  leaf external-identity {
                    type string;
                    mandatory true;
                    description
                      "A sequence of bytes used to identify
                       an EPSK. A label for a pre-shared key established
                       externally.";
                    reference
                      "RFC 8446: The Transport Layer Security (TLS)
                                 Protocol Version 1.3, Section 4.2.11
                       RFC 9257: Guidance for External Pre-Shared Key
                                 (PSK) Usage in TLS, Section 4.1";
                  }
                  leaf hash {
                    type tlscmn:epsk-supported-hash;
                    default sha-256;
                    description
                      "For externally established PSKs, the Hash \
                                                               algorithm
                       must be set when the PSK is established or \
                                                                 default
                       to SHA-256 if no such algorithm is defined.";
                    reference
                      "RFC 8446: The Transport Layer Security (TLS)
                                 Protocol Version 1.3, Section 4.2.11";
                  }
                  leaf context {
                    type string;
                    description
                      "The context used to determine the EPSK, if
                       any exists. For example, context may include
                       information about peer roles or identities
                       to mitigate Selfie-style reflection attacks.";
                    reference
                      "RFC 9258: Importing External Pre-Shared Keys
                                 (PSKs) for TLS 1.3, Section 5.1 ";
                  }
                 /*leaf target-protocol {
                    type uint16;
                    description
                      "Specifies the protocol for which a PSK is
                       imported for use.";
                    reference
                      "RFC 9258: Importing External Pre-Shared Keys
                                 (PSKs) for TLS 1.3, Section 3 ";
                  }*/
                  leaf target-kdf {
                    type uint16;
                    description
                      "The KDF for which a PSK is imported for use.";
                    reference
                      "RFC 9258: Importing External Pre-Shared Keys
                                 (PSKs) for TLS 1.3, Section 3";
                  }
                }
         }
       }
     } // container client-identity
   }

   augment "/sys:system/sys-tcs-plus:tacacs-plus/sys-tcs-plus:server"
         + "/sys-tcs-plus:security" {
       description
         "Adds TLS case.";
       case tls {
         description
           "TLS is used.";
         uses tls-client-grouping;
       }
     }
   }
   <CODE ENDS>

5.  Security Considerations

   This section uses the template described in Section 3.7 of
   [I-D.ietf-netmod-rfc8407bis].

   The YANG module specified in this document defines schema for data
   that is designed to be accessed via network management protocols such
   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF layer
   is the secure transport layer, and the mandatory-to-implement secure
   transport is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer
   is HTTPS, and the mandatory-to-implement secure transport is TLS
   [RFC8446].

   The Network Configuration Access Control Model (NACM) [RFC8341]
   provides the means to restrict access for particular NETCONF or
   RESTCONF users to a preconfigured subset of all available NETCONF or
   RESTCONF protocol operations and content.

   There are a number of data nodes defined in this YANG module that are
   writable/creatable/deletable (i.e., config true, which is the
   default).  These data nodes may be considered sensitive or vulnerable
   in some network environments.  Write operations (e.g., edit-config)
   and delete operations to these data nodes without proper protection
   or authentication can have a negative effect on network operations.
   Specifically, the following subtrees and data nodes have particular
   sensitivities/vulnerabilities:

   'xxx':  xxxx.

   Some of the readable data nodes in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control read access (e.g., via get, get-config, or
   notification) to these data nodes.  Specifically, the following
   subtrees and data nodes have particular sensitivities/
   vulnerabilities:

   'xxx':  xxxx.

6.  IANA Considerations

   IANA is requested to register the following URI in the "ns"
   subregistry within the "IETF XML Registry" [RFC3688]:

      URI:  urn:ietf:params:xml:ns:yang:ietf-system-secure-tacacs
      Registrant Contact:  The IESG.
      XML:  N/A; the requested URI is an XML namespace.

   IANA is requested to register the following YANG module in the "YANG
   Module Names" registry [RFC6020] within the "YANG Parameters"
   registry group:

      Name:  ietf-system-secure-tacacs
      Namespace:  urn:ietf:params:xml:ns:yang:ietf-system-secure-tacacs
      Prefix:  secure-tacacs
      Maintained by IANA?  N
      Reference:  RFC XXXX

7.  References

7.1.  Normative References

   [I-D.ietf-netconf-tls-client-server]
              Watsen, K., "YANG Groupings for TLS Clients and TLS
              Servers", Work in Progress, Internet-Draft, draft-ietf-
              netconf-tls-client-server-41, 16 March 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-netconf-
              tls-client-server-41>.

   [I-D.ietf-opsawg-tacacs-tls13]
              Dahm, T., Heasley, J., dcmgash@cisco.com, and A. Ota,
              "Terminal Access Controller Access-Control System Plus
              (TACACS+) over TLS 1.3", Work in Progress, Internet-Draft,
              draft-ietf-opsawg-tacacs-tls13-10, 22 May 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-opsawg-
              tacacs-tls13-10>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              DOI 10.17487/RFC3688, January 2004,
              <https://www.rfc-editor.org/rfc/rfc3688>.

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <https://www.rfc-editor.org/rfc/rfc6020>.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <https://www.rfc-editor.org/rfc/rfc6241>.

   [RFC6242]  Wasserman, M., "Using the NETCONF Protocol over Secure
              Shell (SSH)", RFC 6242, DOI 10.17487/RFC6242, June 2011,
              <https://www.rfc-editor.org/rfc/rfc6242>.

   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", RFC 8040, DOI 10.17487/RFC8040, January 2017,
              <https://www.rfc-editor.org/rfc/rfc8040>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8341]  Bierman, A. and M. Bjorklund, "Network Configuration
              Access Control Model", STD 91, RFC 8341,
              DOI 10.17487/RFC8341, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8341>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

   [RFC9105]  Wu, B., Ed., Zheng, G., and M. Wang, Ed., "A YANG Data
              Model for Terminal Access Controller Access-Control System
              Plus (TACACS+)", RFC 9105, DOI 10.17487/RFC9105, August
              2021, <https://www.rfc-editor.org/rfc/rfc9105>.

7.2.  Informative References

   [I-D.ietf-netmod-rfc8407bis]
              Bierman, A., Boucadair, M., and Q. Wu, "Guidelines for
              Authors and Reviewers of Documents Containing YANG Data
              Models", Work in Progress, Internet-Draft, draft-ietf-
              netmod-rfc8407bis-11, 18 April 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-netmod-
              rfc8407bis-11>.

   [RFC8340]  Bjorklund, M. and L. Berger, Ed., "YANG Tree Diagrams",
              BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8340>.

   [RFC8907]  Dahm, T., Ota, A., Medway Gash, D.C., Carrel, D., and L.
              Grant, "The Terminal Access Controller Access-Control
              System Plus (TACACS+) Protocol", RFC 8907,
              DOI 10.17487/RFC8907, September 2020,
              <https://www.rfc-editor.org/rfc/rfc8907>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Mohamed Boucadair (editor)
   Orange
   Email: mohamed.boucadair@orange.com
